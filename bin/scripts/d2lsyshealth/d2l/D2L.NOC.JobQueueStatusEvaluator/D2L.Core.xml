<?xml version="1.0"?>
<doc>
    <assembly>
        <name>D2L.Core</name>
    </assembly>
    <members>
        <member name="T:D2L.LP.LayeredArch.Data.ConstructorBinder`1">
            <summary>
            An object binder which binds the fields of an IDataRecord to the parameters of a constructor.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ConstructorBinder`1.#cctor">
            <summary>
            Initializes the <see cref="T:D2L.LP.LayeredArch.Data.ConstructorBinder`1"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ConstructorBinder`1.MapConstructor(System.Data.IDataRecord,D2L.LP.LayeredArch.Data.IDatabaseFieldMapper,System.Boolean,System.Reflection.ConstructorInfo@,System.Int32@,D2L.LP.LayeredArch.Data.ConstructorBinder{`0}.FieldMappingInfo[]@)">
            <summary>
            Maps data record to a constructor.
            </summary>
            <param name="initDataRecord">The initialization data record.</param>
            <param name="dbFieldMapper">The db field mapper.</param>
            <param name="requireAllFeilds">if set to <c>true</c> [require all feilds to be matched].</param>
            <param name="constructorInfo">The constructor info.</param>
            <param name="parameterCount">The parameter count.</param>
            <param name="fieldMappings">The field mappings.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ConstructorBinder`1.TryMapConstructorFields(System.Data.IDataRecord,D2L.LP.LayeredArch.Data.IDatabaseFieldMapper,System.Int32,D2L.LP.LayeredArch.Data.ConstructorBinder{`0}.ConstructorRecord,System.Boolean,System.String@)">
            <summary>
            Tries the to map the constructor fields.
            </summary>
            <param name="initDataRecord">The init data record.</param>
            <param name="dbFieldMapper">The db field mapper.</param>
            <param name="fieldCount">The field count.</param>
            <param name="constructor">The constructor.</param>
            <param name="requireAllFeilds">if set to <c>true</c> [require all feilds].</param>
            <param name="msg">Reference to the error message.</param>
            <returns>Returns an array of the data record to parameter mappings if a mapping exists; NULL otherwise.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ConstructorBinder`1.ValidateConstructorParameterMappings(System.Reflection.ParameterInfo[],D2L.LP.LayeredArch.Data.ConstructorBinder{`0}.FieldMappingInfo[])">
            <summary>
            Validates the constructor parameter mappings.
            </summary>
            <param name="constructorParameters">The constructor parameters.</param>
            <param name="mappings">The mappings.</param>
            <returns>Returns true iff the constructor parameter mappings are valid.</returns>
        </member>
        <member name="T:D2L.LP.LayeredArch.Data.ConstructorBinder`1.MatchedFieldsFactory">
            <summary>
            A data object factory that binds all the fields in a data record
            to the data transfer object.
            </summary>
        </member>
        <member name="T:D2L.LP.LayeredArch.IConverterFactory`2">
            <summary>
            Interface for a factory of a <see cref="T:System.Converter`2"/>
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TDestination">The destination type.</typeparam>
        </member>
        <member name="M:D2L.LP.LayeredArch.IFactory`2.Create(`0)">
            <summary>
            Creates a new instance of <typeparamref name="TDestination"/> from the <typeparamref name="TContext"/>.
            </summary>
            <param name="context">The context.</param>
            <returns>Returns the new instance.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ConstructorBinder`1.MatchedFieldsFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.ConstructorBinder`1.MatchedFieldsFactory"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ConstructorBinder`1.MatchedFieldsFactory.#ctor(D2L.LP.LayeredArch.Data.IDatabaseFieldMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.ConstructorBinder`1.MatchedFieldsFactory"/> class.
            </summary>
            <param name="dbFieldMapper">The db field mapper.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ConstructorBinder`1.MatchedFieldsFactory.Create(System.Data.IDataRecord)">
            <summary>
            Creates the converter.
            </summary>
            <param name="initDataRecord">The data record.</param>
            <returns>Returns the converter.</returns>
        </member>
        <member name="T:D2L.LP.LayeredArch.Data.ConstructorBinder`1.AllFieldsFactory">
            <summary>
            A data object factory that binds all the fields in a data record
            to the data transfer object.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ConstructorBinder`1.AllFieldsFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.ConstructorBinder`1.AllFieldsFactory"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ConstructorBinder`1.AllFieldsFactory.#ctor(D2L.LP.LayeredArch.Data.IDatabaseFieldMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.ConstructorBinder`1.AllFieldsFactory"/> class.
            </summary>
            <param name="dbFieldMapper">The db field mapper.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ConstructorBinder`1.AllFieldsFactory.Create(System.Data.IDataRecord)">
            <summary>
            Creates the converter.
            </summary>
            <param name="initDataRecord">The data record.</param>
            <returns>Returns the converter.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ConstructorBinder`1.ConstructorRecord.CompareTo(D2L.LP.LayeredArch.Data.ConstructorBinder{`0}.ConstructorRecord)">
            <summary>
            Compares the constructor records. Constructors wtih more
            parameters are considered to take precedence.
            </summary>
            <param name="other">The other constructor record.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.DbTypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            	<c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.DbTypeConverter.ConvertFrom(System.Object)">
            <summary>
            Converts the <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns the converted value.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the conversion cannot be done.</exception>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.DbTypeConverter.ConvertToDb(System.Object,System.Data.DbType@,System.Object@)">
            <summary>
            Converts the <paramref name="value"/> to the representative <paramref name="dbType"/> and <paramref name="dbValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="dbType">The db type.</param>
            <param name="dbValue">The db value.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the conversion cannot be done.</exception>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.DbTypeConverter.CanConvertToDb(System.Type,System.Data.DbType@,System.Type@)">
            <summary>
            Determines whether values of the specified type can be converted to a database type.
            </summary>
            <param name="valueType">The value type.</param>
            <param name="dbType">The db type.</param>
            <param name="dbValueType">The db value type.</param>
            <returns>
              <c>true</c> if values of the specified type can be converted to a database type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:D2L.UtcDateTime.DbTypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            	<c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:D2L.UtcDateTime.DbTypeConverter.ConvertFrom(System.Object)">
            <summary>
            Converts the <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns the converted value.</returns>
        </member>
        <member name="M:D2L.UtcDateTime.DbTypeConverter.ConvertToDb(System.Object,System.Data.DbType@,System.Object@)">
            <summary>
            Converts the <paramref name="value"/> to the representative <paramref name="dbType"/> and <paramref name="dbValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="dbType">The db type.</param>
            <param name="dbValue">The db value.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the conversion cannot be done.</exception>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.IXmlSerializer.GetSchema(System.Object)">
            <summary>
            Gets the schema.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns the schema.</returns>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.IXmlSerializer.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the XML.
            </summary>
            <param name="reader">The reader.</param>
            <returns>Returns the item which was read.</returns>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.IXmlSerializer.WriteXml(System.Xml.XmlWriter,System.Object)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:D2L.UtcDateTime.XmlSerializer.GetSchema(System.Object)">
            <summary>
            Gets the schema.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns the schema.</returns>
        </member>
        <member name="M:D2L.UtcDateTime.XmlSerializer.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the XML.
            </summary>
            <param name="reader">The reader.</param>
            <returns>Returns the item which was read.</returns>
        </member>
        <member name="M:D2L.UtcDateTime.XmlSerializer.WriteXml(System.Xml.XmlWriter,System.Object)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:D2L.LP.Utilities.DeferredInitializer`1">
            <summary>
            This class is intended to help with situations of lazy loading.
            The constructor takes an initializer function which is called 
            at the first request of <see cref="P:D2L.LP.Utilities.DeferredInitializer`1.Value"/> 
            iff that value has not already been set.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:D2L.LP.Utilities.IDeferredInitializer`1.SetValue(`0,System.Boolean)">
            <summary>
            Sets the value iff this <see cref="T:D2L.LP.Utilities.IDeferredInitializer`1"/> instance has not been initialized.
            </summary>
            <param name="value">The value.</param>
            <param name="onlyIfNotInitialized">if set to <c>true</c> the value is set iff this instance has not already been initialized.</param>
            <returns>Returns true iff the value was set.</returns>
            <remarks>This method provides a thread safe solution.</remarks>
        </member>
        <member name="M:D2L.LP.Utilities.IDeferredInitializer`1.SetValue(System.Func{`0},System.Boolean)">
            <summary>
            Sets the value iff this <see cref="T:D2L.LP.Utilities.IDeferredInitializer`1"/> instance has not been initialized.
            </summary>
            <param name="valueFetcher">The value fetcher.</param>
            <param name="onlyIfNotInitialized">if set to <c>true</c>the value is set iff this instance has not already been initialized.</param>
            <returns>Returns true iff the value was set.</returns>
            <remarks>This method provides a thread safe solution.</remarks>
        </member>
        <member name="P:D2L.LP.Utilities.IDeferredInitializer`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:D2L.LP.Utilities.IDeferredInitializer`1.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
            <value>
            	<c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:D2L.LP.Utilities.DeferredInitializer`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Utilities.DeferredInitializer`1"/> class.
            </summary>
            <param name="initializer">The value initializer function.</param>
        </member>
        <member name="M:D2L.LP.Utilities.DeferredInitializer`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Utilities.DeferredInitializer`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:D2L.LP.Utilities.DeferredInitializer`1.SetInitialized">
            <summary>
            Sets the initialized.
            </summary>
        </member>
        <member name="M:D2L.LP.Utilities.DeferredInitializer`1.SetValue(`0,System.Boolean)">
            <summary>
            Sets the value iff this <see cref="T:D2L.LP.Utilities.DeferredInitializer`1"/> instance has not been initialized.
            </summary>
            <param name="value">The value.</param>
            <param name="onlyIfNotInitialized">if set to <c>true</c> the value is set iff this instance has not already been initialized.</param>
            <returns>Returns true iff the value was set.</returns>
            <remarks>This method provides a thread safe solution.</remarks>
        </member>
        <member name="M:D2L.LP.Utilities.DeferredInitializer`1.SetValue(System.Func{`0},System.Boolean)">
            <summary>
            Sets the value iff this <see cref="T:D2L.LP.Utilities.DeferredInitializer`1"/> instance has not been initialized.
            </summary>
            <param name="valueFetcher">The value fetcher.</param>
            <param name="onlyIfNotInitialized">if set to <c>true</c>the value is set iff this instance has not already been initialized.</param>
            <returns>Returns true iff the value was set.</returns>
            <remarks>This method provides a thread safe solution.</remarks>
        </member>
        <member name="P:D2L.LP.Utilities.DeferredInitializer`1.Value">
            <summary>
            Gets and sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:D2L.LP.Utilities.DeferredInitializer`1.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
            <value>
            	<c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.Logging.Contexts.ILoggingContext.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="M:D2L.LP.Logging.Configuration.ConfigurationLogManagerFactory.TryCreate(D2L.LP.Logging.ILogManager@)">
            <summary>
            Creates the log manager's necessary components.
            </summary>
            <param name="logManager">The log manager.</param>
            <returns>Returns true iff a log manager could be determined.</returns>
        </member>
        <member name="M:D2L.LP.Logging.Configuration.ConfigurationLogManagerFactory.TryCreateLogManager(D2L.LP.Logging.Configuration.LogManagerFactoryConfigurationElement,D2L.LP.Logging.ILogManager@)">
            <summary>
            Gets the log manager parameters.
            </summary>
            <param name="element">The configuration element.</param>
            <param name="logManager">The log manager.</param>
            <returns>Returns the log manager parameters.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortingInfoExtensions.TranslateSortFields(System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.LoadMoreSortingInfo},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Translates the load more sorting info fields.
            </summary>
            <param name="sortingInfo">The sorting info.</param>
            <param name="sortFieldMappings">The sort field mappings.</param>
            <returns>
            Returns the translated load more sorting info.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Helpers.DbParameterMapper.MapParameter(System.Type,System.Object,System.Data.DbType@,System.Object@)">
            <summary>
            Maps the parameter.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="value">The value.</param>
            <param name="dbType">Type of the db.</param>
            <param name="dbValue">The db value.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Helpers.DbParameterMapper.MapEnumParameter(System.Type,System.Object,System.Data.DbType@,System.Object@)">
            <summary>
            Maps the enum parameter.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="value">The value.</param>
            <param name="dbType">The db type.</param>
            <param name="dbValue">The db value.</param>
        </member>
        <member name="T:D2L.LP.LayeredArch.ConverterFactoryWrapper`2">
            <summary>
            Used to wrap a converter as a converter factory that is context independent.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
        </member>
        <member name="M:D2L.LP.LayeredArch.ConverterFactoryWrapper`2.#ctor(System.Converter{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.ConverterFactoryWrapper`2"/> class.
            </summary>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.ConverterFactoryWrapper`2.Create(`0)">
            <summary>
            Creates a new instance of <typeparamref name="TDestination"/> from the <typeparamref name="TSource"/>.
            </summary>
            <param name="context">The context.</param>
            <returns>Returns the new instance.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.FindGenericInterfaces(System.Type,System.Type)">
            <summary>
            Finds the generic interfaces which are implemented by <paramref name="type"/>
            and extend from <paramref name="genericTypeDefinition"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="genericTypeDefinition">The generic type definition.</param>
            <returns>Returns the generic interfaces types.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="genericTypeDefinition"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="genericTypeDefinition"/> not a generic type definition.</exception>
            /// <exception cref="T:System.ArgumentException">Thrown if <paramref name="genericTypeDefinition"/> not a generic type definition of an interface.</exception>
        </member>
        <member name="M:D2L.DotNetExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether <paramref name="this"/> type can be assigned a value of <c>null</c>.
            </summary>
            <param name="this">The type.</param>
            <returns>
              <c>true</c> if this type can be assigned <c>null</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.IsGenericTypeOf(System.Type,System.Type)">
            <summary>
            Determines whether <paramref name="this"/> is an instance of <paramref name="genericTypeDefinition"/>.
            </summary>
            <param name="this">The type.</param>
            <param name="genericTypeDefinition">The generic type definition.</param>
            <returns>
            Returns true iff <paramref name="this"/> is an instance of <paramref name="genericTypeDefinition"/>.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds the range of values to the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:D2L.DotNetExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            Adds the range of values to the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="values">The values.</param>
            <param name="keySelector">The key selector.</param>
        </member>
        <member name="M:D2L.DotNetExtensions.AddRange``3(System.Collections.Generic.IDictionary{``1,``2},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Adds the range of values to the dictionary.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="items">The items.</param>
            <param name="keySelector">The key selector.</param>
            <param name="valueSelector">The value selector.</param>
        </member>
        <member name="M:D2L.DotNetExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value if one exists, otherwise returns the default value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:D2L.DotNetExtensions.GetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)">
            <summary>
            Gets the value if one exists and is of type <typeparamref name="T"/>, otherwise returns the default value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            Returns value if one exists and is of type <typeparamref name="T"/>, otherwise returns the default value.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.Cast``3(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Casts the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TValueResult">The type of the value result.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns>Returns the casted dictionary.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the items to the collection.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:D2L.DotNetExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes the items from the collection.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:D2L.DotNetExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
            <summary>
            Converts the enumerable of groupings into a dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="groupings">The groupings.</param>
            <returns>Returns the dictionary of groupings.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts the enumerable of groupings into a dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="groupings">The groupings.</param>
            <param name="comparer">The comparer.</param>
            <returns>Returns the dictionary of groupings.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.ThenBy``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates an aggregate comparer that performs a
            subsequent ordering of the items in a sequence
            in ascending order by using a specified comparer.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="source">The source.</param>
            <param name="comparer">The comparer.</param>
            <returns>Returns the comparer.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.ThenBy``1(System.Comparison{``0},System.Comparison{``0})">
            <summary>
            Creates an aggregate comparison that performs a
            subsequent ordering of the items in a sequence
            in ascending order by using a specified comparer.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="source">The source.</param>
            <param name="comparison">The comparison.</param>
            <returns>Returns the comparison.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.Clear(System.Text.StringBuilder)">
            <summary>
            Clears the string builder.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="M:D2L.DotNetExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether [is null or empty] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if [is null or empty] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimToNull(System.String)">
            <summary>
            Trims the string, if the result is empty or NULL then NULL is returned, otherwise the trimmed valued is returned.
            </summary>
            <param name="value">The value.</param>
            <returns>NULL if the value is NULL originally; NULL if the trimmed string is empty; the trimmed string otherwise.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimStartToNull(System.String)">
            <summary>
            Trims the start of a string, if the result is empty or NULL then NULL is returned, otherwise the trimmed valued is returned.
            </summary>
            <param name="value">The value.</param>
            <returns>NULL if the value is NULL originally; NULL if the trimmed string is empty; the trimmed string otherwise.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimEndToNull(System.String)">
            <summary>
            Trims the end of a string, if the result is empty or NULL then NULL is returned, otherwise the trimmed valued is returned.
            </summary>
            <param name="value">The value.</param>
            <returns>
            NULL if the value is NULL originally; NULL if the trimmed string is empty; the trimmed string otherwise.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimToNull(System.String,System.Char[])">
            <summary>
            Trims the string, if the result is empty or NULL then NULL is returned, otherwise the trimmed valued is returned.
            </summary>
            <param name="value">The value.</param>
            <param name="trimChars">The trim chars.</param>
            <returns>
            NULL if the value is NULL originally; NULL if the trimmed string is empty; the trimmed string otherwise.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimStartToNull(System.String,System.Char[])">
            <summary>
            Trims the start of a string, if the result is empty or NULL then NULL is returned, otherwise the trimmed valued is returned.
            </summary>
            <param name="value">The value.</param>
            <param name="trimChars">The trim chars.</param>
            <returns>
            NULL if the value is NULL originally; NULL if the trimmed string is empty; the trimmed string otherwise.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimEndToNull(System.String,System.Char[])">
            <summary>
            Trims the end of a string, if the result is empty or NULL then NULL is returned, otherwise the trimmed valued is returned.
            </summary>
            <param name="value">The value.</param>
            <param name="trimChars">The trim chars.</param>
            <returns>
            NULL if the value is NULL originally; NULL if the trimmed string is empty; the trimmed string otherwise.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimToEmpty(System.String)">
            <summary>
            Trims the string, if the value is NULL then <see cref="F:System.String.Empty"/> is returned, otherwise the trimmed valued is returned.
            </summary>
            <param name="value">The value.</param>
            <returns><see cref="F:System.String.Empty"/> if the value is NULL originally; the trimmed string otherwise.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimStartToEmpty(System.String)">
            <summary>
            Trims the start of the string, if the value is NULL then <see cref="F:System.String.Empty"/> is returned, otherwise the trimmed valued is returned.
            </summary>
            <param name="value">The value.</param>
            <returns><see cref="F:System.String.Empty"/> if the value is NULL originally; the trimmed string otherwise.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimEndToEmpty(System.String)">
            <summary>
            Trims the end of the string, if the value is NULL then <see cref="F:System.String.Empty"/> is returned, otherwise the trimmed valued is returned.
            </summary>
            <param name="value">The value.</param>
            <returns><see cref="F:System.String.Empty"/> if the value is NULL originally; the trimmed string otherwise.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimToEmpty(System.String,System.Char[])">
            <summary>
            Trims the string, if the value is NULL then <see cref="F:System.String.Empty"/> is returned, otherwise the trimmed valued is returned.
            </summary>
            <param name="value">The value.</param>
            <param name="trimChars">The trim chars.</param>
            <returns>
            	<see cref="F:System.String.Empty"/> if the value is NULL originally; the trimmed string otherwise.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimStartToEmpty(System.String,System.Char[])">
            <summary>
            Trims the start of the string, if the value is NULL then <see cref="F:System.String.Empty"/> is returned, otherwise the trimmed valued is returned.
            </summary>
            <param name="value">The value.</param>
            <param name="trimChars">The trim chars.</param>
            <returns>
            	<see cref="F:System.String.Empty"/> if the value is NULL originally; the trimmed string otherwise.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimEndToEmpty(System.String,System.Char[])">
            <summary>
            Trims the end of the string, if the value is NULL then <see cref="F:System.String.Empty"/> is returned, otherwise the trimmed valued is returned.
            </summary>
            <param name="value">The value.</param>
            <param name="trimChars">The trim chars.</param>
            <returns>
            	<see cref="F:System.String.Empty"/> if the value is NULL originally; the trimmed string otherwise.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimLastCharacter(System.String)">
            <summary>
            Trims the last character.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns the string without the last character</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TrimLastCharacter(System.String,System.Char)">
            <summary>
            Trims the last character if it equals that of <paramref name="trimChar"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="trimChar">The trim character.</param>
            <returns>
            Returns the string without the last character iff the
            last character equaled <paramref name="trimChar"/>.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.NormalizeLineEndings(System.String)">
            <summary>
            Normalizes the line endings of a string to <value>\r\n</value>.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns the <paramref name="value"/> with normalized string endings.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.StripCharacters(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Strips the characters which the satisy the <paramref name="predicate"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns the resulting string.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.Contains(System.String,System.Char)">
            <summary>
            Determines whether the string contains the specified character.
            </summary>
            <param name="value">The value.</param>
            <param name="character">The character.</param>
            <returns>
              <c>true</c> if the string contains the character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.IsEndElement(System.Xml.XmlReader)">
            <summary>
            Calls System.Xml.XmlReader.MoveToContent() and tests if the current content
             node is an end tag.
            </summary>
            <param name="xmlReader">The XML reader.</param>
            <returns>
            	<c>true</c> if the current content node is an end tag; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.IsEndElement(System.Xml.XmlReader,System.String)">
            <summary>
            Calls System.Xml.XmlReader.MoveToContent() and tests if the current content
            node is an end tag and if the System.Xml.XmlReader.Name
            property of the element found matches the given argument.
            </summary>
            <param name="xmlReader">The XML reader.</param>
            <param name="name">The string matched against the Name property of the element found.</param>
            <returns>
             true if the resulting node is an element and the Name property matches the
             specified string. false if a node type other than XmlNodeType.EndElement was
             found or if the element Name property does not match the specified string.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.IsEndElement(System.Xml.XmlReader,System.String,System.String)">
             <summary>
             Calls System.Xml.XmlReader.MoveToContent() and tests if the current content
             node is an end tag and if the System.Xml.XmlReader.LocalName
             and System.Xml.XmlReader.NamespaceURI properties of the element found match
              the given strings.
            </summary>
             <param name="xmlReader">The XML reader.</param>
             <param name="localname">The string to match against the LocalName property of the element found.</param>
             <param name="ns">The string to match against the NamespaceURI property of the element found.</param>
             <returns>
             true if the resulting node is an element. false if a node type other than
             XmlNodeType.EndElement was found or if the LocalName and NamespaceURI properties
             of the element do not match the specified strings.
             </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.CountIsLessThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if there are less than <value>count</value> number of items.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="count">The count.</param>
            <returns>Returns true iff there are less items than <paramref name="count"/>.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.CountIsLessThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Determines if there are less than <value>count</value> number of matching items.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="count">The count.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns true iff there are less matching items than <paramref name="count"/>.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.CountIsGreaterThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if there are more than <value>count</value> number of items.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="count">The count.</param>
            <returns>Returns true iff there are more items than <paramref name="count"/>.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.CountIsGreaterThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Determines if there are more than <value>count</value> number of matching items.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="count">The count.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns true iff there are more matching items than <paramref name="count"/>.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.CountIsEqualTo``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if the number of items is equal to <paramref name="count"/>.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="count">The count.</param>
            <returns>Returns true iff the number of items is equal to <paramref name="count"/>.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.CountIsEqualTo``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Determines if the number of matching items is equal to <paramref name="count"/>.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="count">The count.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns true iff the number of matching items is equal to <paramref name="count"/>.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.CountIsLessThanOrEqualTo``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if there are less than <value>count</value> number of items.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="count">The count.</param>
            <returns>Returns true iff there are less items than <paramref name="count"/>.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.CountIsLessThanOrEqualTo``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Determines if there are less than <value>count</value> number of matching items.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="count">The count.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns true iff there are less matching items than <paramref name="count"/>.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.CountIsGreaterThanOrEqualTo``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if there are more than <value>count</value> number of items.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="count">The count.</param>
            <returns>Returns true iff there are more items than <paramref name="count"/>.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.CountIsGreaterThanOrEqualTo``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Determines if there are more than <value>count</value> number of matching items.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="count">The count.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns true iff there are more matching items than <paramref name="count"/>.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the <paramref name="action"/> foreach item in <paramref name="items"/>.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:D2L.DotNetExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Action{``0})">
            <summary>
            Performs the <paramref name="action"/> foreach item in <paramref name="items"/> where the <paramref name="predicate"/> is satisified.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="predicate">The predicate.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:D2L.DotNetExtensions.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines if  an item that satisifies the <paramref name="predicate"/> exists in <paramref name="items"/>.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns true iff an item that satisifies the <paramref name="predicate"/> exists in <paramref name="items"/>.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Concats the specified items to the end of this instance.
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="items">The items.</param>
            <param name="addme">The addme.</param>
            <returns>Returns the concatenated enumerable.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts the items to a string.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="seperator">The item seperator.</param>
            <returns>Returns the formatted items string.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Converts the items to a string.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="seperator">The item seperator.</param>
            <param name="formatter">The formatter.</param>
            <returns>Returns the formatted items string.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.LazyCache``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a lazy cache of the enumerable. The first
            enumeration will be cached, and reused upon subsequent
            enumerations.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <returns>
            Returns the caching enumerable.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.LazyCache``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Creates a lazy cache of the enumerable so long as the number of items is
            less than or equal to <paramref name="maxCacheSize"/>. Otherwise no caching
            will occur.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="maxCacheSize">The maximum number of items to cache.</param>
            <returns>
            Returns the limited caching enumerable.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.ToPositionInfo``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the enumerable to a position info enumerable.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <returns>Returns the position info enumerable.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TryGetSingle``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            Tries to get a single item from the enumerable.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <returns>Returns true iff there was a single item; false otherwise.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.AsCovariant``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Projects the enumerable as a covariant type.
            </summary>
            <typeparam name="TIn">The type of the in.</typeparam>
            <typeparam name="TOut">The type of the out.</typeparam>
            <param name="items">The items.</param>
            <returns>Returns the enumerable of items.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)">
            <summary>
            Fetches the first item from the enumerable.
            </summary>
            <typeparam name="T">The type of items in the enumerable.</typeparam>
            <param name="items">The enumerable list of items.</param>
            <param name="firstItem">The first item from the enumerable is assigned to firstItem.</param>
            <param name="predicate">The predicate.</param>
            <returns>True if there is at least one item in the enumerable, false otherwise</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            Fetches the first item from the enumerable.
            </summary>
            <typeparam name="T">The type of items in the enumerable.</typeparam>
            <param name="items">The enumerable list of items.</param>
            <param name="firstItem">The first item from the enumerable is assigned to firstItem.</param>
            <returns>True if there is at least one item in the enumerable, false otherwise</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Partitions the items into arrays of the specified size.
            </summary>
            <typeparam name="T">The type of items in the enumerable.</typeparam>
            <param name="items">The items to partition.</param>
            <param name="maxPartitionSize">The desired size for the partitions.</param>
            <returns>An enumerable of arrays of at most the specified size.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.Buffer``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Internally buffers the specified items.
            </summary>
            <typeparam name="T">The type of items in the enumerable.</typeparam>
            <param name="items">The items.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <returns>Returns a buffering enumerable.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.Enumerate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Forces the <paramref name="items"/> to be completely enumerated.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="items">The items.</param>
        </member>
        <member name="M:D2L.DotNetExtensions.GetValueOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets the value for the specified key if one exists, otherwise creates and adds a new item using the provided <paramref name="createFunction"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="createFunction">The create function.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.GetValueOrReplace``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Predicate{``1},System.Func{``1})">
            <summary>
            Gets the value for the specified key and validates it using
            <paramref name="predicate"/> if one exists, otherwise creates
            and adds a new item using the provided <paramref name="createFunction"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="predicate">The predicate.</param>
            <param name="createFunction">The create function.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.GetValueOrReplace``3(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``2})">
            <summary>
            Gets the value for the specified key and validates its type if one exists, otherwise creates
            and adds a new item using the provided <paramref name="createFunction"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TValueType">The type of the value type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="createFunction">The create function.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.GetValueOrReplace``3(System.Collections.Generic.Dictionary{``0,``1},``0,System.Predicate{``2},System.Func{``2})">
            <summary>
            Gets the value for the specified key and validates it using
            <typeparamref name="TValueType"/> and <paramref name="predicate"/> if one exists, otherwise creates
            and adds a new item using the provided <paramref name="createFunction"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TValueType">The type of the value type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="predicate">The predicate.</param>
            <param name="createFunction">The create function.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.AddIfKeyDoesNotExist``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.Dictionary`2"/>, as long as an existing element with the same key does not already exist.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The value.</param>
            <returns>
            Returns true iff the item was added; false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.Dictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.DotNetExtensions.AddIfKeyDoesNotExist``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.Dictionary`2"/>, as long as an existing element with the same key does not already exist.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="valueFetcher">The value fetcher.</param>
            <returns>
            Returns true iff the item was added; false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.Dictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.DotNetExtensions.RemoveRange``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes the items from the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:D2L.DotNetExtensions.CreateParameter(System.Data.IDbCommand,System.String,System.Object,System.Data.DbType)">
            <summary>
            Creates an input parameter.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
            <param name="dbType">The database type.</param>
            <returns>Returns the parameter.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.CreateParameter(System.Data.IDbCommand,System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Creates the parameter.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
            <param name="dbType">The database type.</param>
            <param name="direction">The direction.</param>
            <returns>Returns the parameter.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.Combine``1(System.Collections.Generic.IEnumerable{System.Predicate{``0}},D2L.Core.Logic.LogicOperator,System.Boolean)">
            <summary>
            Combines the provided predicates.
            </summary>
            <typeparam name="T">The type of the object to compare.</typeparam>
            <param name="predicates">The predicates.</param>
            <param name="operator">The operator.</param>
            <param name="trueIfEmpty">if set to <c>true</c>, and the <paramref name="predicates"/> is empty,
            then a predicate which always returns true will be returned;
            otherwise a predicate which always returns false will be returned.</param>
            <returns>
            Returns a composite predicate function.
            </returns>
            <exception cref="T:System.ArgumentException">Unsupported logic operator;operator</exception>
        </member>
        <member name="M:D2L.DotNetExtensions.Combine``1(System.Collections.Generic.IEnumerable{System.Func{``0,System.Boolean}},D2L.Core.Logic.LogicOperator,System.Boolean)">
            <summary>
            Combines the provided predicates.
            </summary>
            <typeparam name="T">The type of the object to compare.</typeparam>
            <param name="predicates">The predicates.</param>
            <param name="operator">The operator.</param>
            <param name="trueIfEmpty">if set to <c>true</c>, and the <paramref name="predicates"/> is empty,
            then a predicate which always returns true will be returned;
            otherwise a predicate which always returns false will be returned.</param>
            <returns>
            Returns a composite predicate function.
            </returns>
            <exception cref="T:System.ArgumentException">Unsupported logic operator;operator</exception>
        </member>
        <member name="M:D2L.DotNetExtensions.TryGet(System.Collections.Specialized.NameValueCollection,System.String,System.String@)">
            <summary>
            Tries to get the keyed element.
            </summary>
            <param name="collection">The collection.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            Returns true iff the value could be gotten; false otherwise.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.TryGet``1(System.Collections.Specialized.NameValueCollection,System.String,D2L.TryGetFunc{System.String,``0},``0@)">
            <summary>
            Tries to get the keyed element.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
            <param name="value">The value.</param>
            <returns>Returns true iff the value could be gotten; false otherwise.</returns>
        </member>
        <member name="M:D2L.DotNetExtensions.SafeDispose(System.IDisposable)">
            <summary>
            Tries to dispose the object and catches/logs any exceptions
            that are thrown.
            </summary>
            <param name="disposable">The disposable.</param>
            <returns>
            Returns true iff the object was disposed.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.SafeDispose(System.IDisposable,System.Boolean)">
            <summary>
            Tries to dispose the object and catches/logs any exceptions
            that are thrown. Only pass false 
            for <paramref name="doNotLog"/> in exceptional cases when you expect 
            an exception and don't care about logging it.
            </summary>
            <param name="disposable">The disposable.</param>
            <param name="doNotLog">Don't log the exception if it happens</param>
            <returns>
            Returns true iff the object was disposed.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.SafeDispose(System.IDisposable,System.Exception@)">
            <summary>
            Tries to dispose the object and catches/logs any exceptions
            that are thrown.
            </summary>
            <param name="disposable">The disposable.</param>
            <param name="exception">The exception (if one was thrown).</param>
            <returns>
            Returns true iff the object was disposed.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.SafeDispose(System.IDisposable,System.Exception@,System.Boolean)">
            <summary>
            Tries to dispose the object and catches/logs any exceptions
            that are thrown. Only pass false 
            for <paramref name="doNotLog"/> in exceptional cases when you expect 
            an exception and don't care about logging it.
            </summary>
            <param name="disposable">The disposable.</param>
            <param name="exception">The exception (if one was thrown).</param>
            <param name="doNotLog">Don't log the exception if it happens</param>
            <returns>
            Returns true iff the object was disposed.
            </returns>
        </member>
        <member name="M:D2L.DotNetExtensions.GetBytes(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Copies the 16-element byte representation of the <see cref="T:System.Guid"/> instance
            into the provided byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
        </member>
        <member name="M:D2L.DotNetExtensions.GetBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the 4-element byte representation of the <see cref="T:System.Int32"/> instance
            into the provided byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
        </member>
        <member name="M:D2L.DotNetExtensions.GetBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the 8-element byte representation of the <see cref="T:System.Int64"/> instance
            into the provided byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
        </member>
        <member name="M:D2L.Core.Transactions.TransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Transactions.TransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:D2L.Core.Transactions.TransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Transactions.TransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.IConcurrentQueue`1.TryPeek(`0@)">
            <summary>
            Tries to peek at the item which at the start of the queue.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns true iff an item could be peeked at.</returns>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.IConcurrentQueue`1.TryDequeue(`0@)">
            <summary>
            Tries to dequeue the item.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns true iff the item was dequeue.</returns>
            <remarks>This method does not block.</remarks>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.IConcurrentQueue`1.TryDequeue(`0@,System.Int32)">
            <summary>
            Tries to dequeue the item.
            </summary>
            <param name="item">The item.</param>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns>Returns true iff the item was dequeue.</returns>
            <remarks>
            This method will attempt to block for the duration of the 
            <paramref name="millisecondsTimeout"/> if the queue is empty.
            </remarks>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.IConcurrentQueue`1.TryEnqueue(`0)">
            <summary>
            Tries to enqueue the item.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns true iff the item was enqueued.</returns>
            <remarks>This method does not block.</remarks>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.IConcurrentQueue`1.ToArray">
            <summary>
            Converts the queue to an <see cref="T:System.Array"/>
            </summary>
            <returns>Returns the array of items in the queue.</returns>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.IConcurrentQueue`1.Clear">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="P:D2L.Core.Collections.Concurrent.IConcurrentQueue`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.IBoundedConcurrentQueue`1.TryEnqueue(`0,System.Int32)">
            <summary>
            Tries to enqueue the item.
            </summary>
            <param name="item">The item.</param>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns>Returns true iff the item was enqueued.</returns>
            <remarks>
            This method will attempt to block for the duration 
            of the <paramref name="millisecondsTimeout"/> if the queue 
            is full.
            </remarks>
        </member>
        <member name="P:D2L.Core.Collections.Concurrent.IBoundedConcurrentQueue`1.MaximumSize">
            <summary>
            Gets the maximum size.
            </summary>
            <value>The maximum size.</value>
        </member>
        <member name="M:D2L.LP.Logging.Configuration.LogManagerFactoryConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Gets a value indicating whether an unknown element is encountered during deserialization.
            </summary>
            <param name="elementName">The name of the unknown subelement.</param>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> being used for deserialization.</param>
            <returns>
            true when an unknown element is encountered while deserializing; otherwise, false.
            </returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            The element identified by <paramref name="elementName"/> is locked.
            - or -
            One or more of the element's attributes is locked.
            - or -
            <paramref name="elementName"/> is unrecognized, or the element has an unrecognized attribute.
            - or -
            The element has a Boolean attribute with an invalid value.
            - or -
            An attempt was made to deserialize a property more than once.
            - or -
            An attempt was made to deserialize a property that is not a valid member of the element.
            - or -
            The element cannot contain a CDATA or text element.
            </exception>
        </member>
        <member name="M:D2L.LP.Logging.Configuration.LogManagerFactoryConfigurationElement.Parse(System.Xml.XmlReader)">
            <summary>
            Parses the <see cref="T:D2L.LP.Logging.Configuration.LogManagerFactoryConfigurationElement"/> from the provider xml reader.
            </summary>
            <param name="xmlR">The xml reader.</param>
            <returns>Returns the configuration element.</returns>
        </member>
        <member name="P:D2L.LP.Logging.Configuration.LogManagerFactoryConfigurationElement.Type">
            <summary>
            Gets the type of the factory.
            </summary>
            <value>The type of the factory.</value>
        </member>
        <member name="P:D2L.LP.Logging.Configuration.LogManagerFactoryConfigurationElement.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDatabase.ExecuteReader(D2L.LP.LayeredArch.Data.SqlCommandBase,System.Data.CommandBehavior)">
            <summary>
            Executes the specified command.
            </summary>
            <param name="command">The command.</param>
            <param name="commandBehavior">The command behavior.</param>
            <returns>Returns a data reader of the result sets defined by the command.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDatabase.ExecuteReader(D2L.LP.LayeredArch.Data.SqlCommandBase)">
            <summary>
            Executes the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns>Returns a data reader of the result sets defined by the command.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDatabase.ExecuteScalar``1(D2L.LP.LayeredArch.Data.SqlCommandBase)">
            <summary>
            Executes the scalar.
            </summary>
            <typeparam name="T">The scalar's data type.</typeparam>
            <param name="command">The command.</param>
            <returns>Returns the scalar result.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDatabase.ExecuteScalar``1(D2L.LP.LayeredArch.Data.SqlCommandBase,``0)">
            <summary>
            Executes the scalar.
            </summary>
            <typeparam name="T">The scalar's data type.</typeparam>
            <param name="command">The command.</param>
            <param name="defaultValue">The value to return when there is no data</param>
            <returns>Returns the scalar result.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDatabase.ExecuteNonQuery(D2L.LP.LayeredArch.Data.SqlCommandBase)">
            <summary>
            Executes the non query command.
            </summary>
            <param name="command">The command.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="T:D2L.LP.LayeredArch.Data.Helpers.DataConverter">
            <summary>
            Common location for the conversion of data.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Helpers.DataConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Helpers.DataConverter"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Helpers.DataConverter.ConvertValue``1(System.Object)">
            <summary>
            Tries to convert the value to the preferred type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The preferred type.</typeparam>
            <param name="value">The value.</param>
            <returns>Returns the value in type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the value could not be converted to type <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NullReferenceException">Thrown if the value is NULL and preferred type <typeparamref name="T"/> is not an object.</exception>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Helpers.DataConverter.ConvertValue(System.Object,System.Type)">
            <summary>
            Tries to convert the value to the specified preferred type.
            </summary>
            <param name="value">The value.</param>
            <param name="preferredType">Type of the preferred.</param>
            <returns>Returns the converted value if possible; the original value otherwise.</returns>
            <exception cref="T:D2L.LP.LayeredArch.Data.DataBindingException">Thrown if the preferred type is a <see cref="T:System.DateTime"/>.</exception>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.CreateConnection">
            <summary>
            Creates the connection.
            </summary>
            <returns>Returns the connection.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.MapDatabaseParameter(System.Type,System.Object,System.Data.DbType@,System.Object@)">
            <summary>
            Maps the parameter to a database parameter.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="value">The value.</param>
            <param name="dbType">Type of the db.</param>
            <param name="dbValue">The db value.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.FormatInlineDatabaseParameter(System.Data.DbType,System.Object)">
            <summary>
            Formats the inline database parameter.
            </summary>
            <param name="dbType">Type of the db.</param>
            <param name="dbValue">The db value.</param>
            <returns>Returns the inline parameter representation.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.CreateCommand(D2L.LP.LayeredArch.Data.SqlCommandBase)">
            <summary>
            Creates the command.
            </summary>
            <param name="command">The command.</param>
            <returns>Returns the database command.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.SetupTransaction(System.Data.IDbCommand,D2L.Core.Transactions.IStatefulTransaction)">
            <summary>
            Setups the transaction.
            </summary>
            <param name="command">The command.</param>
            <param name="transaction">The transaction.</param>
            <returns>Returns the commmand.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.ConvertParameters(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.Data.Ado.EventsDbCommandWrapper)">
            <summary>
            Converts the parameters.
            </summary>
            <param name="sqlCommand">The SQL command.</param>
            <param name="dbCommand">The db command.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.ConvertParameter(D2L.LP.LayeredArch.Data.SqlParameter,D2L.LP.LayeredArch.Data.Ado.EventsDbCommandWrapper)">
            <summary>
            Converts the parameter.
            </summary>
            <param name="sqlParam">The SQL param.</param>
            <param name="dbCommand">The target database command.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.CreateValuedParameter(D2L.LP.LayeredArch.Data.IValuedSqlParameter,D2L.LP.LayeredArch.Data.Ado.EventsDbCommandWrapper)">
            <summary>
            Creates the valued parameter.
            </summary>
            <param name="valuedParam">The valued param.</param>
            <param name="dbCommand">The db command.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.CreateOutputParameter(D2L.LP.LayeredArch.Data.IOutputSqlParameter,D2L.LP.LayeredArch.Data.Ado.EventsDbCommandWrapper)">
            <summary>
            Creates the output parameter.
            </summary>
            <param name="outParam">The out param.</param>
            <param name="dbCommand">The db command.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.CreateReturnValueParameter(D2L.LP.LayeredArch.Data.IReturnValueSqlParameter,D2L.LP.LayeredArch.Data.Ado.EventsDbCommandWrapper)">
            <summary>
            Creates the return parameter.
            </summary>
            <param name="retParam">The return parameter.</param>
            <param name="dbCommand">The db command.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.ExecuteReader(D2L.LP.LayeredArch.Data.SqlCommandBase)">
            <summary>
            Executes the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns>Returns a data reader of the result sets defined by the command.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.ExecuteReader(D2L.LP.LayeredArch.Data.SqlCommandBase,System.Data.CommandBehavior)">
            <summary>
            Executes the specified command.
            </summary>
            <param name="command">The command.</param>
            <param name="commandBehavior">The command behavior.</param>
            <returns>Returns a data reader of the result sets defined by the command.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.ExecuteReader(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Executes the database command.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="commandBehavior">The command behavior.</param>
            <returns>Returns the data reader.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.ExecuteScalarHelper(D2L.LP.LayeredArch.Data.SqlCommandBase)">
            <summary>
            Executes the scalar helper.
            </summary>
            <param name="command">The command.</param>
            <returns>Returns the scalar result.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.AdoDatabaseBase.ExecuteNonQuery(D2L.LP.LayeredArch.Data.SqlCommandBase)">
            <summary>
            Executes the non query command.
            </summary>
            <param name="command">The command.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:D2L.Core.Transactions.TransactionActionEventArgs.#ctor(D2L.Core.Transactions.TransactionActions)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Transactions.TransactionActionEventArgs"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:D2L.Core.Transactions.TransactionActionEventArgs.Action">
            <summary>
            Gets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="T:D2L.Core.Threading.ReaderWriterLockSlimAdapter">
            <summary>
            Adapts a ReaderWriterLockSlim to an IReaderWriterLock.
            </summary>
        </member>
        <member name="M:D2L.Core.Threading.ReaderWriterLockSlimAdapter.#ctor(System.Threading.LockRecursionPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Threading.ReaderWriterLockSlimAdapter"/> class.
            </summary>
            <param name="recursionPolicy">The recursion policy.</param>
        </member>
        <member name="M:D2L.Core.Threading.ReaderWriterLockSlimAdapter.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Threading.ReaderWriterLockSlimAdapter"/> class.
            </summary>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="E:D2L.Core.Data.MsSql.Diagnostics.IRecordCountNotifier.ReaderClosed">
            <summary>
            Occurs when a query is executed.
            </summary>
        </member>
        <member name="M:D2L.Core.Data.MsSql.Diagnostics.IRecordCountPublisher.Publish(System.Object,D2L.Core.Data.MsSql.Diagnostics.RecordCountEventArgs)">
            <summary>
            Publishes a record count event.
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:D2L.Core.Data.MsSql.Diagnostics.RecordCountBroadcaster.Publish(System.Object,D2L.Core.Data.MsSql.Diagnostics.RecordCountEventArgs)">
            <summary>
            Publishes a record count event.
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="E:D2L.Core.Data.MsSql.Diagnostics.RecordCountBroadcaster.ReaderClosed">
            <summary>
            Occurs when a data reader is closed.
            </summary>
        </member>
        <member name="T:D2L.Core.Comparisons.GenericComparer">
            <summary>
            A utility class for comparing values based on their properties.
            </summary>
            <remarks><value>null</value> is consider to come before all non-null values.</remarks>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``2(``0,``0,System.Func{``0,``1})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``3(``0,``0,System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <typeparam name="T2">The second key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``4(``0,``0,System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``3})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <typeparam name="T2">The second key type.</typeparam>
            <typeparam name="T3">The third key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="thirdKeySelector">The third key selector.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``5(``0,``0,System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``3},System.Func{``0,``4})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <typeparam name="T2">The second key type.</typeparam>
            <typeparam name="T3">The third key type.</typeparam>
            <typeparam name="T4">The forth key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="thirdKeySelector">The third key selector.</param>
            <param name="forthKeySelector">The forth key selector.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``6(``0,``0,System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``3},System.Func{``0,``4},System.Func{``0,``5})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <typeparam name="T2">The second key type.</typeparam>
            <typeparam name="T3">The third key type.</typeparam>
            <typeparam name="T4">The forth key type.</typeparam>
            <typeparam name="T5">The fifth key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="thirdKeySelector">The third key selector.</param>
            <param name="forthKeySelector">The forth key selector.</param>
            <param name="fifthKeySelector">The fifth key selector.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``2(``0,``0,System.Func{``0,``1},System.Comparison{``1})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``3(``0,``0,System.Func{``0,``1},System.Comparison{``1},System.Func{``0,``2},System.Comparison{``2})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <typeparam name="T2">The second key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="secondComparer">The second comparer.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``4(``0,``0,System.Func{``0,``1},System.Comparison{``1},System.Func{``0,``2},System.Comparison{``2},System.Func{``0,``3},System.Comparison{``3})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <typeparam name="T2">The second key type.</typeparam>
            <typeparam name="T3">The third key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="secondComparer">The second comparer.</param>
            <param name="thirdKeySelector">The third key selector.</param>
            <param name="thirdComparer">The third comparer.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``5(``0,``0,System.Func{``0,``1},System.Comparison{``1},System.Func{``0,``2},System.Comparison{``2},System.Func{``0,``3},System.Comparison{``3},System.Func{``0,``4},System.Comparison{``4})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <typeparam name="T2">The second key type.</typeparam>
            <typeparam name="T3">The third key type.</typeparam>
            <typeparam name="T4">The forth key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="secondComparer">The second comparer.</param>
            <param name="thirdKeySelector">The third key selector.</param>
            <param name="thirdComparer">The third comparer.</param>
            <param name="forthKeySelector">The forth key selector.</param>
            <param name="forthComparer">The forth comparer.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``6(``0,``0,System.Func{``0,``1},System.Comparison{``1},System.Func{``0,``2},System.Comparison{``2},System.Func{``0,``3},System.Comparison{``3},System.Func{``0,``4},System.Comparison{``4},System.Func{``0,``5},System.Comparison{``5})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <typeparam name="T2">The second key type.</typeparam>
            <typeparam name="T3">The third key type.</typeparam>
            <typeparam name="T4">The forth key type.</typeparam>
            <typeparam name="T5">The fifth key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="secondComparer">The second comparer.</param>
            <param name="thirdKeySelector">The third key selector.</param>
            <param name="thirdComparer">The third comparer.</param>
            <param name="forthKeySelector">The forth key selector.</param>
            <param name="forthComparer">The forth comparer.</param>
            <param name="fifthKeySelector">The fifth key selector.</param>
            <param name="fifthComparer">The fifth comparer.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``2(``0,``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``3(``0,``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``2})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <typeparam name="T2">The second key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="secondComparer">The second comparer.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``4(``0,``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``2},System.Func{``0,``3},System.Collections.Generic.IComparer{``3})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <typeparam name="T2">The second key type.</typeparam>
            <typeparam name="T3">The third key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="secondComparer">The second comparer.</param>
            <param name="thirdKeySelector">The third key selector.</param>
            <param name="thirdComparer">The third comparer.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``5(``0,``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``2},System.Func{``0,``3},System.Collections.Generic.IComparer{``3},System.Func{``0,``4},System.Collections.Generic.IComparer{``4})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <typeparam name="T2">The second key type.</typeparam>
            <typeparam name="T3">The third key type.</typeparam>
            <typeparam name="T4">The forth key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="secondComparer">The second comparer.</param>
            <param name="thirdKeySelector">The third key selector.</param>
            <param name="thirdComparer">The third comparer.</param>
            <param name="forthKeySelector">The forth key selector.</param>
            <param name="forthComparer">The forth comparer.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer.Compare``6(``0,``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``2},System.Func{``0,``3},System.Collections.Generic.IComparer{``3},System.Func{``0,``4},System.Collections.Generic.IComparer{``4},System.Func{``0,``5},System.Collections.Generic.IComparer{``5})">
            <summary>
            Compares the two items <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="T1">The first key type.</typeparam>
            <typeparam name="T2">The second key type.</typeparam>
            <typeparam name="T3">The third key type.</typeparam>
            <typeparam name="T4">The forth key type.</typeparam>
            <typeparam name="T5">The fifth key type.</typeparam>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="secondComparer">The second comparer.</param>
            <param name="thirdKeySelector">The third key selector.</param>
            <param name="thirdComparer">The third comparer.</param>
            <param name="forthKeySelector">The forth key selector.</param>
            <param name="forthComparer">The forth comparer.</param>
            <param name="fifthKeySelector">The fifth key selector.</param>
            <param name="fifthComparer">The fifth comparer.</param>
            <returns>Returns the compairison result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer`2.#ctor(System.Func{`0,`1},System.Comparison{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Comparisons.GenericComparer`2"/> class.
            </summary>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer`2.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer`3.#ctor(System.Func{`0,`1},System.Comparison{`1},System.Func{`0,`2},System.Comparison{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Comparisons.GenericComparer`3"/> class.
            </summary>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="secondComparer">The second comparer.</param>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer`3.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer`4.#ctor(System.Func{`0,`1},System.Comparison{`1},System.Func{`0,`2},System.Comparison{`2},System.Func{`0,`3},System.Comparison{`3})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Comparisons.GenericComparer`3"/> class.
            </summary>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="secondComparer">The second comparer.</param>
            <param name="thirdKeySelector">The third key selector.</param>
            <param name="thirdComparer">The third comparer.</param>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer`4.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer`5.#ctor(System.Func{`0,`1},System.Comparison{`1},System.Func{`0,`2},System.Comparison{`2},System.Func{`0,`3},System.Comparison{`3},System.Func{`0,`4},System.Comparison{`4})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Comparisons.GenericComparer`3"/> class.
            </summary>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="secondComparer">The second comparer.</param>
            <param name="thirdKeySelector">The third key selector.</param>
            <param name="thirdComparer">The third comparer.</param>
            <param name="forthKeySelector">The forth key selector.</param>
            <param name="forthComparer">The forth comparer.</param>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer`5.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer`6.#ctor(System.Func{`0,`1},System.Comparison{`1},System.Func{`0,`2},System.Comparison{`2},System.Func{`0,`3},System.Comparison{`3},System.Func{`0,`4},System.Comparison{`4},System.Func{`0,`5},System.Comparison{`5})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Comparisons.GenericComparer`3"/> class.
            </summary>
            <param name="firstKeySelector">The first key selector.</param>
            <param name="firstComparer">The first comparer.</param>
            <param name="secondKeySelector">The second key selector.</param>
            <param name="secondComparer">The second comparer.</param>
            <param name="thirdKeySelector">The third key selector.</param>
            <param name="thirdComparer">The third comparer.</param>
            <param name="forthKeySelector">The forth key selector.</param>
            <param name="forthComparer">The forth comparer.</param>
            <param name="fifthKeySelector">The fifth key selector.</param>
            <param name="fifthComparer">The fifth comparer.</param>
        </member>
        <member name="M:D2L.Core.Comparisons.GenericComparer`6.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:D2L.Core.Collections.IReadOnlyList`1.ToArray">
            <summary>
            Returns an array of the values in the list.
            </summary>
            <returns>The array of values.</returns>
        </member>
        <member name="M:D2L.Core.Collections.IReadOnlyList`1.TryGetValue(System.Int32,`0@)">
            <summary>
            Tries to get the value at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns>Returns true iff the index is within the bounds of the array and a value was assigned.</returns>
        </member>
        <member name="P:D2L.Core.Collections.IReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="T"/> at the specified index.
            </summary>
            <value>Returns the value.</value>
        </member>
        <member name="P:D2L.Core.Collections.IReadOnlyList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="M:D2L.Core.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Collections.ReadOnlyList`1"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:D2L.Core.Collections.ReadOnlyList`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Collections.ReadOnlyList`1"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:D2L.Core.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Collections.ReadOnlyList`1"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:D2L.Core.Collections.ReadOnlyList`1.TryGetValue(System.Int32,`0@)">
            <summary>
            Tries to get the value at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns>Returns true iff the index is within the bounds of the array and a value was assigned.</returns>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.Log(D2L.LP.Logging.ILogger,D2L.LP.Logging.LogLevels,System.Object)">
            <summary>
            Logs a message with the specified log level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.Log(D2L.LP.Logging.ILogger,D2L.LP.Logging.LogLevels,System.Object,System.Exception)">
            <summary>
            Logs a message with the specified log level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.LogFormat(D2L.LP.Logging.ILogger,D2L.LP.Logging.LogLevels,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the specified log level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The level.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.LogFormat(D2L.LP.Logging.ILogger,D2L.LP.Logging.LogLevels,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the specified log level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The level.</param>
            <param name="exception">The exception.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.DebugFormat(D2L.LP.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the DEBUG level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.DebugFormat(D2L.LP.Logging.ILogger,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the DEBUG level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.DebugFormat(D2L.LP.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the DEBUG level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.DebugFormat(D2L.LP.Logging.ILogger,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the DEBUG level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.InfoFormat(D2L.LP.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the INFO level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.InfoFormat(D2L.LP.Logging.ILogger,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the INFO level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.InfoFormat(D2L.LP.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the INFO level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.InfoFormat(D2L.LP.Logging.ILogger,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the INFO level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.WarnFormat(D2L.LP.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the WARN level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.WarnFormat(D2L.LP.Logging.ILogger,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the WARN level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.WarnFormat(D2L.LP.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the WARN level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.WarnFormat(D2L.LP.Logging.ILogger,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the WARN level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.ErrorFormat(D2L.LP.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the ERROR level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.ErrorFormat(D2L.LP.Logging.ILogger,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the ERROR level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.ErrorFormat(D2L.LP.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the ERROR level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.ErrorFormat(D2L.LP.Logging.ILogger,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the ERROR level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.FatalFormat(D2L.LP.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the FATAL level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.FatalFormat(D2L.LP.Logging.ILogger,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the FATAL level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.FatalFormat(D2L.LP.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the FATAL level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILoggerExtensions.FatalFormat(D2L.LP.Logging.ILogger,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the FATAL level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:D2L.LP.Logging.Contexts.DummyLoggingContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Logging.Contexts.DummyLoggingContext"/> class.
            </summary>
        </member>
        <member name="P:D2L.LP.LayeredArch.IReadOnlyField.Modified">
            <summary>
            Gets a value indicating whether this field instance has been modified.
            </summary>
            <value><c>true</c> if modified; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.IReadOnlyField`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.IReadOnlyField`1.InitialValue">
            <summary>
            Gets the initial value (or the value that was last used to initialize).
            </summary>
            <value>The initial value.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldExtensions.Adapt``2(D2L.LP.LayeredArch.IReadOnlyField{``0},System.Converter{``0,``1})">
            <summary>
            Adapts the specified field.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="field">The field.</param>
            <param name="adapter">The adapter.</param>
            <returns>Returns the adapted field.</returns>
            <remarks>
            An adapted field maintains a reference to the orginal
            field. Changes made to the original field are flected
            in the adapted field.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldExtensions.Convert``2(D2L.LP.LayeredArch.IReadOnlyField{``0},System.Converter{``0,``1})">
            <summary>
            Converts the specified field.
            </summary>
            <typeparam name="TInput">The input type.</typeparam>
            <typeparam name="TOutput">The output type.</typeparam>
            <param name="field">The field.</param>
            <param name="converter">The converter.</param>
            <returns>Returns the converted field.</returns>
            <remarks>
            A converted field, does not maintain a reference to the 
            orginial field. It is a converted copy of the field
            at the time of conversion.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IExtendedDatabase.ExecuteReaderQuery(D2L.LP.LayeredArch.Data.SqlTextCommand,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo})">
            <summary>
            Executes the reader query.
            </summary>
            <param name="command">The command.</param>
            <param name="sortingInfo">The sorting info.</param>
            <returns>Returns a data reader of the result sets defined by the command.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IExtendedDatabase.ExecuteReaderQuery(D2L.LP.LayeredArch.Data.SqlTextCommand,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.LoadMoreSortingInfo})">
            <summary>
            Executes the reader query.
            </summary>
            <param name="command">The command.</param>
            <param name="sortingInfo">The sorting info.</param>
            <returns>Returns a data reader of the result sets defined by the command.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IExtendedDatabase.ExecutePagedReaderQuery(D2L.LP.LayeredArch.Data.SqlTextCommand,D2L.LP.LayeredArch.PagingInfo,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo})">
            <summary>
            Executes a paged reader query.
            </summary>
            <param name="command">The command.</param>
            <param name="pagingInfo">The paging info.</param>
            <param name="sortInfo">The sort info.</param>
            <returns>
            Returns a data reader where the first result set contains
            the total object count, and the second result set contains
            the command's query results.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IExtendedDatabase.ExecuteLoadMorePagingReaderQuery(D2L.LP.LayeredArch.Data.SqlTextCommand,System.Int32,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.LoadMoreSortingInfo})">
            <summary>
            Executes the load more paging reader query.
            </summary>
            <param name="command">The command.</param>
            <param name="pageSize">The page size.</param>
            <param name="sortingInfo">The sorting info.</param>
            <returns>
            Returns a data reader where the first result set contains
            the total object count, and the second result set contains
            the command's query results.
            </returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IExtendedDatabase.QueryFormatter">
            <summary>
            Gets the query formatter.
            </summary>
            <value>The query formatter.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IResultSet`2.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`2.#ctor(D2L.LP.LayeredArch.Data.IDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`2"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="command">The command.</param>
            <param name="converterFactory1">The converter factory1.</param>
            <param name="converterFactory2">The converter factory2.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IResultSet`3.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`3.#ctor(D2L.LP.LayeredArch.Data.IDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`3"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="command">The command.</param>
            <param name="converterFactory1">The converter factory1.</param>
            <param name="converterFactory2">The converter factory2.</param>
            <param name="converterFactory3">The converter factory3.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IResultSet`4.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`4.#ctor(D2L.LP.LayeredArch.Data.IDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`4"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="command">The command.</param>
            <param name="converterFactory1">The converter factory1.</param>
            <param name="converterFactory2">The converter factory2.</param>
            <param name="converterFactory3">The converter factory3.</param>
            <param name="converterFactory4">The converter factory4.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IResultSet`5.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`5.#ctor(D2L.LP.LayeredArch.Data.IDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`4})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`5"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="command">The command.</param>
            <param name="converterFactory1">The converter factory1.</param>
            <param name="converterFactory2">The converter factory2.</param>
            <param name="converterFactory3">The converter factory3.</param>
            <param name="converterFactory4">The converter factory4.</param>
            <param name="converterFactory5">The converter factory5.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IResultSet`6.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`6.#ctor(D2L.LP.LayeredArch.Data.IDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`5})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`5"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="command">The command.</param>
            <param name="converterFactory1">The converter factory1.</param>
            <param name="converterFactory2">The converter factory2.</param>
            <param name="converterFactory3">The converter factory3.</param>
            <param name="converterFactory4">The converter factory4.</param>
            <param name="converterFactory5">The converter factory5.</param>
            <param name="converterFactory6">The converter factory6.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IResultSet`7.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`7.#ctor(D2L.LP.LayeredArch.Data.IDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`6})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`5"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="command">The command.</param>
            <param name="converterFactory1">The converter factory1.</param>
            <param name="converterFactory2">The converter factory2.</param>
            <param name="converterFactory3">The converter factory3.</param>
            <param name="converterFactory4">The converter factory4.</param>
            <param name="converterFactory5">The converter factory5.</param>
            <param name="converterFactory6">The converter factory6.</param>
            <param name="converterFactory7">The converter factory7.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IResultSet`8.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`8.#ctor(D2L.LP.LayeredArch.Data.IDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`6},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`7})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`5"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="command">The command.</param>
            <param name="converterFactory1">The converter factory1.</param>
            <param name="converterFactory2">The converter factory2.</param>
            <param name="converterFactory3">The converter factory3.</param>
            <param name="converterFactory4">The converter factory4.</param>
            <param name="converterFactory5">The converter factory5.</param>
            <param name="converterFactory6">The converter factory6.</param>
            <param name="converterFactory7">The converter factory7.</param>
            <param name="converterFactory8">The converter factory8.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IResultSet`9.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`9.#ctor(D2L.LP.LayeredArch.Data.IDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`6},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`7},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`8})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`5"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="command">The command.</param>
            <param name="converterFactory1">The converter factory1.</param>
            <param name="converterFactory2">The converter factory2.</param>
            <param name="converterFactory3">The converter factory3.</param>
            <param name="converterFactory4">The converter factory4.</param>
            <param name="converterFactory5">The converter factory5.</param>
            <param name="converterFactory6">The converter factory6.</param>
            <param name="converterFactory7">The converter factory7.</param>
            <param name="converterFactory8">The converter factory8.</param>
            <param name="converterFactory9">The converter factory9.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IResultSet`10.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`10.#ctor(D2L.LP.LayeredArch.Data.IDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`6},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`7},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`8},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`9})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectResultSet`5"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="command">The command.</param>
            <param name="converterFactory1">The converter factory1.</param>
            <param name="converterFactory2">The converter factory2.</param>
            <param name="converterFactory3">The converter factory3.</param>
            <param name="converterFactory4">The converter factory4.</param>
            <param name="converterFactory5">The converter factory5.</param>
            <param name="converterFactory6">The converter factory6.</param>
            <param name="converterFactory7">The converter factory7.</param>
            <param name="converterFactory8">The converter factory8.</param>
            <param name="converterFactory9">The converter factory9.</param>
            <param name="converterFactory10">The converter factory10.</param>
        </member>
        <member name="T:D2L.LP.LayeredArch.Data.DbTypeConverterAttribute">
            <summary>
            An attribute to mark a type's <see cref="T:D2L.LP.LayeredArch.Data.DbTypeConverter"/>.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.DbTypeConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.DbTypeConverterAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.DbTypeConverterAttribute.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:D2L.Core.IO.CsvTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.IO.CsvTextReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:D2L.Core.IO.CsvTextReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:D2L.Core.IO.CsvTextReader.ReadLine">
            <summary>
            Reads a line of the CSV file.
            </summary>
            <returns>Returns the CSV parts if data was available, NULL otherwise.</returns>
        </member>
        <member name="M:D2L.Core.IO.CsvTextReader.ReadLine(System.String@)">
            <summary>
            Reads the line.
            </summary>
            <param name="line">The raw line which was read.</param>
            <returns>
            Returns the CSV parts if data was available, NULL otherwise.
            </returns>
        </member>
        <member name="M:D2L.Core.IO.CsvTextReader.ReadLine(System.Boolean,System.String@)">
            <summary>
            Reads a line of the CSV file.
            </summary>
            <returns>Returns the CSV parts if data was available, NULL otherwise.</returns>
        </member>
        <member name="M:D2L.Core.IO.CsvTextReader.ReadIntoBuffer">
            <summary>
            Reads the into buffer.
            </summary>
            <returns>Returns the number of characters read into the buffer.</returns>
        </member>
        <member name="P:D2L.Core.Data.Events.DbCommandEventArgs.Command">
            <summary>
            Gets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="M:D2L.Core.Data.Events.IDbCommandEventPublisher.Publish(System.Object,D2L.Core.Data.Events.DbCommandEventArgs)">
            <summary>
            Publishes the specified database command event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:D2L.Core.Data.Events.DbCommandEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:D2L.Core.Collections.EnumerableConverter`1">
            <summary>
            Used to convert the objects of an enumerable.
            </summary>
            <typeparam name="TDestination">The destination type.</typeparam>
        </member>
        <member name="M:D2L.Core.Collections.EnumerableConverter`1.#ctor(System.Collections.IEnumerable,System.Converter{System.Object,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Collections.EnumerableConverter`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:D2L.Core.Collections.EnumerableConverter`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:D2L.Core.Collections.EnumerableConverter`1.Enumerator.#ctor(System.Collections.IEnumerator,System.Converter{System.Object,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Collections.EnumerableConverter`1.Enumerator"/> class.
            </summary>
            <param name="enumerator">The enumerator.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:D2L.Core.Collections.EnumerableConverter`1.Enumerator.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:D2L.Core.Collections.EnumerableConverter`1.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:D2L.Core.Collections.EnumerableConverter`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:D2L.Core.Collections.EnumerableConverter`1.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:D2L.Core.Collections.EnumerableConverter`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetExtensions.Cache``2(D2L.LP.LayeredArch.Data.IResultSet{``0,``1})">
            <summary>
            Caches the result set.
            </summary>
            <param name="resultSet">The result set.</param>
            <returns>Returns the cached result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetExtensions.Cache``3(D2L.LP.LayeredArch.Data.IResultSet{``0,``1,``2})">
            <summary>
            Caches the result set.
            </summary>
            <param name="resultSet">The result set.</param>
            <returns>Returns the cached result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetExtensions.Cache``4(D2L.LP.LayeredArch.Data.IResultSet{``0,``1,``2,``3})">
            <summary>
            Caches the result set.
            </summary>
            <param name="resultSet">The result set.</param>
            <returns>Returns the cached result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetExtensions.Cache``5(D2L.LP.LayeredArch.Data.IResultSet{``0,``1,``2,``3,``4})">
            <summary>
            Caches the result set.
            </summary>
            <param name="resultSet">The result set.</param>
            <returns>Returns the cached result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetExtensions.Cache``6(D2L.LP.LayeredArch.Data.IResultSet{``0,``1,``2,``3,``4,``5})">
            <summary>
            Caches the result set.
            </summary>
            <param name="resultSet">The result set.</param>
            <returns>Returns the cached result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetExtensions.Cache``7(D2L.LP.LayeredArch.Data.IResultSet{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Caches the result set.
            </summary>
            <param name="resultSet">The result set.</param>
            <returns>Returns the cached result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetExtensions.Cache``8(D2L.LP.LayeredArch.Data.IResultSet{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Caches the result set.
            </summary>
            <param name="resultSet">The result set.</param>
            <returns>Returns the cached result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetExtensions.Cache``9(D2L.LP.LayeredArch.Data.IResultSet{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Caches the result set.
            </summary>
            <param name="resultSet">The result set.</param>
            <returns>Returns the cached result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetExtensions.Cache``10(D2L.LP.LayeredArch.Data.IResultSet{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Caches the result set.
            </summary>
            <param name="resultSet">The result set.</param>
            <returns>Returns the cached result set.</returns>
        </member>
        <member name="M:D2L.Core.Collections.OrderedMergingEnumerable`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Collections.OrderedMergingEnumerable`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="sources">The ordered enumerable sources.</param>
        </member>
        <member name="P:D2L.LP.Logging.Loggers.ILoggerConfiguration.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is logging DEBUG level messages.
            </summary>
            <value>
            	<c>true</c> if this instance is logging DEBUG level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.Logging.Loggers.ILoggerConfiguration.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is logging INFO level messages.
            </summary>
            <value>
            	<c>true</c> if this instance is logging INFO level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.Logging.Loggers.ILoggerConfiguration.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is logging WARN level messages.
            </summary>
            <value>
            	<c>true</c> if this instance is logging WARN level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.Logging.Loggers.ILoggerConfiguration.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is logging ERROR level messages.
            </summary>
            <value>
            	<c>true</c> if this instance is logging ERROR level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.Logging.Loggers.ILoggerConfiguration.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is logging FATAL level messages.
            </summary>
            <value>
            	<c>true</c> if this instance is logging FATAL level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.Logging.Loggers.ILoggerConfiguration.IsStackTraceIncluded">
            <summary>
            Gets a value indicating whether this instance is stack trace included.
            </summary>
            <value>
            	<c>true</c> if this instance is stack trace included; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.LayeredArch.IPagedResult.ObjectCount">
            <summary>
            Gets the object count.
            </summary>
            <value>The object count.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.IPagedResult.ObjectCollection">
            <summary>
            Gets the objects.
            </summary>
            <value>The objects.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.IPagedResult.TotalCount">
            <summary>
            Gets the total count.
            </summary>
            <value>The total count.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.IPagedResult.PageNumber">
            <summary>
            Gets the page number.
            </summary>
            <value>The page number.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.IPagedResult.PageSize">
            <summary>
            Gets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.IPagedResult`1.Objects">
            <summary>
            Gets the objects.
            </summary>
            <value>The objects.</value>
        </member>
        <member name="T:D2L.LP.LayeredArch.KeyedDeferredField`2">
            <summary>
            A special use case field where we want to deffer the initialization
            of the field using a key value, but once the field has been initialized,
            use a property of the field as the updated key.
            
            This is particularly useful if your domain entity uses sub-objects
            that interact with each other. Using this field, you can lazy load
            the related object, while still maintaining the original key if the
            field hasn't changed.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:D2L.LP.LayeredArch.IField.CommitChanges">
            <summary>
            Commits the changes made to the field and sets the Modified flag to false.
            </summary>
            <remarks>
            The initial value will now become the current value.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.IField.RollbackChanges">
            <summary>
            Rolls back the changes made to the field and sets the Modified flag to false.
            </summary>
            <remarks>
            The value will be returned to the initial value.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.IField`1.Initialize(`0)">
            <summary>
            Initializes the instance with the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.IField`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.IDeferredField`1.Initialize(`0,System.Boolean)">
            <summary>
            Initializes the instance with the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="onlyIfNotInitialized">if set to <c>true</c> then the field is initialized iff the field is not already initialized.</param>
            <returns>Returns iff this method call initialized the field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.IDeferredField`1.Initialize(System.Func{`0},System.Boolean)">
            <summary>
            Initializes the instance with the specified value.
            </summary>
            <param name="valueFetcher">The value fetcher.</param>
            <param name="onlyIfNotInitialized">if set to <c>true</c> then the field is initialized iff the field is not already initialized.</param>
            <returns>
            Returns iff this method call initialized the field.
            </returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.IDeferredField`1.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
            <value>
            	<c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.LayeredArch.IKeyedDeferredField`2.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
            <remarks>
            If the field has been initialized, the key selector will be used.
            If the field has not been initialized, but the initializer key has been set, that initializer key will be returned.
            Otherwise an <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.KeyedDeferredField`2.#ctor(`0,System.Func{`0,`1},D2L.EqualityComparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.KeyedDeferredField`2"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="keySelector">The key selector.</param>
            <param name="equalityComparison">The equality comparison.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.KeyedDeferredField`2.#ctor(`1,System.Func{`1,`0},System.Func{`0,`1},D2L.EqualityComparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.KeyedDeferredField`2"/> class.
            </summary>
            <param name="initializerKey">The initializer key.</param>
            <param name="initializer">The initializer function.</param>
            <param name="keySelector">The key selector.</param>
            <param name="equalityComparison">The equality comparison.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.KeyedDeferredField`2.Initialize(`0)">
            <summary>
            Initializes the field. The specified value will be assigned
            and the modified flag will be set to false.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.KeyedDeferredField`2.Initialize(`0,System.Boolean)">
            <summary>
            Initializes the instance with the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="onlyIfNotInitialized">if set to <c>true</c> then the field is initialized iff the field is not already initialized.</param>
            <returns>
            Returns iff this method call initialized the field.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.KeyedDeferredField`2.Initialize(System.Func{`0},System.Boolean)">
            <summary>
            Initializes the instance with the specified value.
            </summary>
            <param name="valueFetcher">The value fetcher.</param>
            <param name="onlyIfNotInitialized">if set to <c>true</c> then the field is initialized iff the field is not already initialized.</param>
            <returns>
            Returns iff this method call initialized the field.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.KeyedDeferredField`2.CommitChanges">
            <summary>
            Commits the changes made to the field and sets the Modified flag to false.
            </summary>
            <remarks>
            The initial value will now become the current value.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.KeyedDeferredField`2.RollbackChanges">
            <summary>
            Rolls back the changes made to the field and sets the Modified flag to false.
            </summary>
            <remarks>
            The value will be returned to the initial value.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.KeyedDeferredField`2.Initialize">
            <summary>
            Initializes the field.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.KeyedDeferredField`2.SetInitialized">
            <summary>
            Sets the initialized.
            </summary>
        </member>
        <member name="P:D2L.LP.LayeredArch.KeyedDeferredField`2.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
            <remarks>
            If the field has been initialized, the key selector will be used.
            If the field has not been initialized, but the initializer key has been set, that initializer key will be returned.
            Otherwise an <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
        </member>
        <member name="P:D2L.LP.LayeredArch.KeyedDeferredField`2.Value">
            <summary>
            Field value
            </summary>
        </member>
        <member name="P:D2L.LP.LayeredArch.KeyedDeferredField`2.InitialValue">
            <summary>
            Gets the initial value (or the value that was last used to initialize).
            </summary>
            <value>The initial value.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.KeyedDeferredField`2.Modified">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:D2L.LP.LayeredArch.IField"/> is modified.
            </summary>
            <value><c>true</c> if modified; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.KeyedDeferredField`2.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
            <value>
            	<c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:D2L.LP.LayeredArch.Field`1">
            <summary>
            <para>[djankovic]</para>
            <para>Class: Field</para>
            <para>Description: Modifiable field</para>
            </summary>
            <typeparam name="T">Type of field</typeparam>
        </member>
        <member name="M:D2L.LP.LayeredArch.Field`1.#ctor(D2L.EqualityComparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Field`1"/> class.
            </summary>
            <param name="equalityComparison">The equality comparison.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Field`1.#ctor(`0,D2L.EqualityComparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Field`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="equalityComparison">The equality comparison.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Field`1.Initialize(`0)">
            <summary>
            Initializes the field. The specified value will be assigned
            and the modified flag will be set to false.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Field`1.CommitChanges">
            <summary>
            Commits the changes made to the field and sets the Modified flag to false.
            </summary>
            <remarks>
            The initial value will now become the current value.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.Field`1.RollbackChanges">
            <summary>
            Rolls back the changes made to the field and sets the Modified flag to false.
            </summary>
            <remarks>
            The value will be returned to the initial value.
            </remarks>
        </member>
        <member name="P:D2L.LP.LayeredArch.Field`1.Value">
            <summary>
            Field value
            </summary>
        </member>
        <member name="P:D2L.LP.LayeredArch.Field`1.InitialValue">
            <summary>
            Gets the initial value (or the value that was last used to initialize).
            </summary>
            <value>The initial value.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Field`1.Modified">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:D2L.LP.LayeredArch.IField"/> is modified.
            </summary>
            <value><c>true</c> if modified; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:D2L.LP.LayeredArch.Data.Xml">
            <summary>
            Data type for sending and retrieving xml.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Xml.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Xml"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Xml.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Xml.Equals(System.String)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Xml.Equals(D2L.LP.LayeredArch.Data.Xml)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Xml.op_Implicit(System.String)~D2L.LP.LayeredArch.Data.Xml">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:D2L.LP.LayeredArch.Data.Xml"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Xml.op_Implicit(System.Xml.XmlNode)~D2L.LP.LayeredArch.Data.Xml">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:D2L.LP.LayeredArch.Data.Xml"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Xml.op_Implicit(D2L.LP.LayeredArch.Data.Xml)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:D2L.LP.LayeredArch.Data.Xml"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.Xml.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Xml.DbTypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            	<c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Xml.DbTypeConverter.ConvertFrom(System.Object)">
            <summary>
            Converts the <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns the converted value.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Xml.DbTypeConverter.ConvertToDb(System.Object,System.Data.DbType@,System.Object@)">
            <summary>
            Converts the <paramref name="value"/> to the representative <paramref name="sqlDbType"/> and <paramref name="sqlDbValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="sqlDbType">The SQL db type.</param>
            <param name="sqlDbValue">The SQL db value.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlCommandBase"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBase.#ctor(D2L.Core.Transactions.IStatefulTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlCommandBase"/> class.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBase.AddParameter(D2L.LP.LayeredArch.Data.SqlParameter)">
            <summary>
            Adds the sql parameter.
            </summary>
            <param name="parameter">The parameter to add.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBase.AddParameter``1(System.String,``0)">
            <summary>
            Adds the valued sql parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>Returns the new parameter.</returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.SqlCommandBase.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.SqlCommandBase.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlProcedure.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlProcedure"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlProcedure.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlProcedure"/> class.
            </summary>
            <param name="schema">The schema.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlProcedure.#ctor(System.String,D2L.Core.Transactions.IStatefulTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlProcedure"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlProcedure.AddOutputParameter``1(System.String)">
            <summary>
            Adds the output sql parameter.
            </summary>
            <typeparam name="T">The .NET parameter type.</typeparam>
            <param name="name">The name.</param>
            <returns>Returns the new parameter.</returns>
            <remarks>
            Output parameters are only supported for non-query and 
            scalar command executions.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlProcedure.AddOutputParameter``1(System.String,System.Int32)">
            <summary>
            Adds the output sql parameter.
            </summary>
            <typeparam name="T">The .NET parameter type.</typeparam>
            <param name="name">The name.</param>
            <param name="dbTypeSize">The size of database type defined for the output parameter.  For example, if varchar( 50 ) is used, then the database type size is 50.</param>
            <returns>Returns the new parameter.</returns>
            <remarks>
            Output parameters are only supported for non-query and 
            scalar command executions.
            </remarks>
            <remarks>
            This overloaded method must be used for variable types.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlProcedure.AddReturnValueParameter``1(System.String)">
            <summary>
            Adds the return sql parameter.
            </summary>
            <typeparam name="T">The .NET parameter type.</typeparam>
            <param name="name">The name.</param>
            <returns>Returns the new parameter.</returns>
            <remarks>
            Return parameters are only supported for non-query and 
            scalar command executions.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlProcedure.AddReturnValueParameter``1(System.String,System.Int32)">
            <summary>
            Adds the return sql parameter.
            </summary>
            <typeparam name="T">The .NET parameter type.</typeparam>
            <param name="name">The name.</param>
            <param name="dbTypeSize">The size of database type defined for the output parameter.  For example, if varchar( 50 ) is used, then the database type size is 50.</param>
            <returns>Returns the new parameter.</returns>
            <remarks>
            Return parameters are only supported for non-query and 
            scalar command executions.
            </remarks>
            <remarks>
            This overloaded method must be used for variable types.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlProcedure.AddTableParameter``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the table valued sql parameter.
            </summary>
            <typeparam name="T">The table definition type.</typeparam>
            <param name="name">The name.</param>
            <param name="items">The items.</param>
            <returns>Returns the new parameter.</returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.SqlProcedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.SqlProcedure.Schema">
            <summary>
            Gets the schema.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlTextCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlTextCommand"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlTextCommand.#ctor(D2L.Core.Transactions.IStatefulTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlTextCommand"/> class.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlTextCommand.GetCommandText">
            <summary>
            Gets the command text.
            </summary>
            <returns>Returns the command text.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlTextCommand.ValidateSqlText(System.String)">
            <summary>
            Validates the SQL text.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">Thrown if the value contains illegal characters.</exception>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlTextCommand.DisableSqlValidation(D2L.LP.LayeredArch.Data.SqlTextCommand)">
            <summary>
            Disables sql validation.  This is needed for some XML queries.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlTextCommand.AddTableParameter``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the table valued sql parameter.
            </summary>
            <typeparam name="T">The table definition type.</typeparam>
            <param name="name">The name.</param>
            <param name="items">The items.</param>
            <returns>Returns the new parameter.</returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.SqlTextCommand.CommandText">
            <summary>
            Gets the command text.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlCommand"/> class.
            </summary>
            <param name="commandText">The command text.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommand.#ctor(System.String,D2L.Core.Transactions.IStatefulTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlCommand"/> class.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.SqlCommand.CommandText">
            <summary>
            Gets or sets the command text.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetAdapter`2.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetAdapter`3.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetAdapter`4.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetAdapter`5.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetAdapter`6.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetAdapter`7.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetAdapter`8.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetAdapter`9.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultSetAdapter`10.GetResults">
            <summary>
            Gets the results.
            </summary>
            <returns>Returns the results.</returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IValuedSqlParameter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IValuedSqlParameter.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IValuedSqlParameter.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.ReadObject``1(D2L.LP.LayeredArch.Data.SqlCommandBase,System.Converter{System.Data.IDataRecord,``0},``0)">
            <summary>
            Reads the first object from the result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="cmd">The command.</param>
            <param name="converter">The converter used to convert a data record to the object.</param>
            <param name="defaultValue">Returned when there is no data</param>
            <returns>Returns the data transfer object.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.ReadObject``1(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},``0)">
            <summary>
            Reads the first object from the result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="cmd">The command.</param>
            <param name="factory">The factory.</param>
            <param name="defaultValue">Returned when there is no data</param>
            <returns>Returns the data transfer object.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.TryReadObject``1(D2L.LP.LayeredArch.Data.SqlCommandBase,System.Converter{System.Data.IDataRecord,``0},``0@)">
            <summary>
            Tries to read the first object from the result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="cmd">The command.</param>
            <param name="converter">The converter used to convert a data record to the object.</param>
            <param name="value">The value which is read.</param>
            <returns>Returns true iff the object could be read.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.TryReadObject``1(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},``0@)">
            <summary>
            Tries to read the first object from the result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="cmd">The command.</param>
            <param name="factory">The factory.</param>
            <param name="value">The value which is read.</param>
            <returns>Returns true iff the object could be read.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetObjectReader``1(D2L.LP.LayeredArch.Data.SqlCommandBase,System.Converter{System.Data.IDataRecord,``0})">
            <summary>
            Gets an enumerable object reader from the first result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object to be read.</typeparam>
            <param name="cmd">The command.</param>
            <param name="converter">The converter used to convert a data record to the object.</param>
            <returns>Returns the enumerable object reader.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetObjectReader``1(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0})">
            <summary>
            Gets an enumerable object reader from the first result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object to be read.</typeparam>
            <param name="cmd">The command.</param>
            <param name="factory">The factory.</param>
            <returns>Returns the enumerable object reader.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetObjectReader``1(D2L.LP.LayeredArch.Data.SqlTextCommand,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo},System.Converter{System.Data.IDataRecord,``0})">
            <summary>
            Gets an enumerable object reader from the first result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object to be read.</typeparam>
            <param name="cmd">The command.</param>
            <param name="sortingInfo">The sorting info.</param>
            <param name="converter">The converter used to convert a data record to the object.</param>
            <returns>
            Returns the enumerable object reader.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetObjectReader``1(D2L.LP.LayeredArch.Data.SqlTextCommand,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0})">
            <summary>
            Gets an enumerable object reader from the first result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object to be read.</typeparam>
            <param name="cmd">The command.</param>
            <param name="sortingInfo">The sorting info.</param>
            <param name="factory">The factory.</param>
            <returns>
            Returns the enumerable object reader.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetObjectReader``1(D2L.LP.LayeredArch.Data.SqlTextCommand,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.LoadMoreSortingInfo},System.Converter{System.Data.IDataRecord,``0})">
            <summary>
            Gets an enumerable object reader from the first result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object to be read.</typeparam>
            <param name="cmd">The command.</param>
            <param name="sortingInfo">The sorting info.</param>
            <param name="converter">The converter used to convert a data record to the object.</param>
            <returns>
            Returns the enumerable object reader.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetObjectReader``1(D2L.LP.LayeredArch.Data.SqlTextCommand,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.LoadMoreSortingInfo},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0})">
            <summary>
            Gets an enumerable object reader from the first result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object to be read.</typeparam>
            <param name="cmd">The command.</param>
            <param name="sortingInfo">The sorting info.</param>
            <param name="factory">The factory.</param>
            <returns>
            Returns the enumerable object reader.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetPagedObjectResult``1(D2L.LP.LayeredArch.Data.SqlTextCommand,D2L.LP.LayeredArch.PagingInfo,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo},System.Converter{System.Data.IDataRecord,``0})">
            <summary>
            Gets a paged object result from the sql command.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="cmd">The command.</param>
            <param name="pagingInfo">The paging info.</param>
            <param name="sortingInfo">The sorting info.</param>
            <param name="converter">The converter.</param>
            <returns>Returns the paged result.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetPagedObjectResult``1(D2L.LP.LayeredArch.Data.SqlTextCommand,D2L.LP.LayeredArch.PagingInfo,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0})">
            <summary>
            Gets a paged object result from the sql command.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="cmd">The command.</param>
            <param name="pagingInfo">The paging info.</param>
            <param name="sortingInfo">The sorting info.</param>
            <param name="factory">The factory.</param>
            <returns>Returns the paged result.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetLoadMorePagingObjectReader``1(D2L.LP.LayeredArch.Data.SqlTextCommand,System.Int32,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.LoadMoreSortingInfo},System.Converter{System.Data.IDataRecord,``0})">
            <summary>
            Gets a load more paging object reader from the sql command.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="command">The command.</param>
            <param name="pageSize">The page size.</param>
            <param name="sortingInfo">The sorting info.</param>
            <param name="converter">The converter.</param>
            <returns>Returns the enumerable object reader.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetLoadMorePagingObjectReader``1(D2L.LP.LayeredArch.Data.SqlTextCommand,System.Int32,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.LoadMoreSortingInfo},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0})">
            <summary>
            Gets a load more paging object reader from the sql command.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="command">The command.</param>
            <param name="pageSize">The page size.</param>
            <param name="sortingInfo">The sorting info.</param>
            <param name="factory">The factory.</param>
            <returns>Returns the enumerable object reader.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetResultSet``2(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetResultSet``3(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetResultSet``4(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetResultSet``5(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``4})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <param name="converterFactory5">The fifth result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetResultSet``6(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``5})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <typeparam name="T6">The type of the sixth result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <param name="converterFactory5">The fifth result converter factory.</param>
            <param name="converterFactory6">The sixth result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetResultSet``7(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``6})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <typeparam name="T6">The type of the sixth result.</typeparam>
            <typeparam name="T7">The type of the seventh result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <param name="converterFactory5">The fifth result converter factory.</param>
            <param name="converterFactory6">The sixth result converter factory.</param>
            <param name="converterFactory7">The seventh result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetResultSet``8(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``6},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``7})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <typeparam name="T6">The type of the sixth result.</typeparam>
            <typeparam name="T7">The type of the seventh result.</typeparam>
            <typeparam name="T8">The type of the eighth result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <param name="converterFactory5">The fifth result converter factory.</param>
            <param name="converterFactory6">The sixth result converter factory.</param>
            <param name="converterFactory7">The seventh result converter factory.</param>
            <param name="converterFactory8">The eighth result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetResultSet``9(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``6},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``7},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``8})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <typeparam name="T6">The type of the sixth result.</typeparam>
            <typeparam name="T7">The type of the seventh result.</typeparam>
            <typeparam name="T8">The type of the eighth result.</typeparam>
            <typeparam name="T9">The type of the ninth result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <param name="converterFactory5">The fifth result converter factory.</param>
            <param name="converterFactory6">The sixth result converter factory.</param>
            <param name="converterFactory7">The seventh result converter factory.</param>
            <param name="converterFactory8">The eighth result converter factory.</param>
            <param name="converterFactory9">The ninth result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabase.GetResultSet``10(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``6},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``7},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``8},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``9})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <typeparam name="T6">The type of the sixth result.</typeparam>
            <typeparam name="T7">The type of the seventh result.</typeparam>
            <typeparam name="T8">The type of the eighth result.</typeparam>
            <typeparam name="T9">The type of the ninth result.</typeparam>
            <typeparam name="T10">The type of the tenth result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <param name="converterFactory5">The fifth result converter factory.</param>
            <param name="converterFactory6">The sixth result converter factory.</param>
            <param name="converterFactory7">The seventh result converter factory.</param>
            <param name="converterFactory8">The eighth result converter factory.</param>
            <param name="converterFactory9">The ninth result converter factory.</param>
            <param name="converterFactory10">The tenth result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IDTObjectDatabase.QueryFormatter">
            <summary>
            Gets the query formatter.
            </summary>
            <value>The query formatter.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.ReadObject``1(D2L.LP.LayeredArch.Data.SqlCommandBase,System.Converter{System.Data.IDataRecord,``0})">
            <summary>
            Reads the first object from the result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="cmd">The command.</param>
            <param name="converter">The converter used to convert a data record to the object.</param>
            <returns>Returns the data transfer object.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetObjectReader``1(D2L.LP.LayeredArch.Data.SqlCommandBase,System.Converter{System.Data.IDataRecord,``0})">
            <summary>
            Gets an enumerable object reader from the first result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object to be read.</typeparam>
            <param name="cmd">The command.</param>
            <param name="converter">The converter used to convert a data record to the object.</param>
            <returns>Returns the enumerable object reader.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetObjectReader``1(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0})">
            <summary>
            Gets an enumerable object reader from the first result set defined by the provided command.
            </summary>
            <typeparam name="TObject">The type of the object to be read.</typeparam>
            <param name="cmd">The command.</param>
            <param name="factory">The factory.</param>
            <returns>Returns the enumerable object reader.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetPagedObjectResult``1(D2L.LP.LayeredArch.Data.SqlTextCommand,D2L.LP.LayeredArch.PagingInfo,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo},System.Converter{System.Data.IDataRecord,``0})">
            <summary>
            Gets a paged object result from the sql command.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="cmd">The command.</param>
            <param name="pagingInfo">The paging info.</param>
            <param name="sortingInfo">The sorting info.</param>
            <param name="converter">The converter.</param>
            <returns>Returns the paged result.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetPagedObjectResult``1(D2L.LP.LayeredArch.Data.SqlTextCommand,D2L.LP.LayeredArch.PagingInfo,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0})">
            <summary>
            Gets a paged object result from the sql command.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="cmd">The command.</param>
            <param name="pagingInfo">The paging info.</param>
            <param name="sortingInfo">The sorting info.</param>
            <param name="factory">The factory.</param>
            <returns>Returns the paged result.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetResultSet``2(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetResultSet``3(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetResultSet``4(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetResultSet``5(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``4})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <param name="converterFactory5">The converter factory5.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetResultSet``6(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``5})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <typeparam name="T6">The type of the sixth result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <param name="converterFactory5">The fifth result converter factory.</param>
            <param name="converterFactory6">The sixth result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetResultSet``7(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``6})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <typeparam name="T6">The type of the sixth result.</typeparam>
            <typeparam name="T7">The type of the seventh result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <param name="converterFactory5">The fifth result converter factory.</param>
            <param name="converterFactory6">The sixth result converter factory.</param>
            <param name="converterFactory7">The seventh result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetResultSet``8(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``6},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``7})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <typeparam name="T6">The type of the sixth result.</typeparam>
            <typeparam name="T7">The type of the seventh result.</typeparam>
            <typeparam name="T8">The type of the eighth result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <param name="converterFactory5">The fifth result converter factory.</param>
            <param name="converterFactory6">The sixth result converter factory.</param>
            <param name="converterFactory7">The seventh result converter factory.</param>
            <param name="converterFactory8">The eighth result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetResultSet``9(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``6},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``7},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``8})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <typeparam name="T6">The type of the sixth result.</typeparam>
            <typeparam name="T7">The type of the seventh result.</typeparam>
            <typeparam name="T8">The type of the eighth result.</typeparam>
            <typeparam name="T9">The type of the ninth result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <param name="converterFactory5">The fifth result converter factory.</param>
            <param name="converterFactory6">The sixth result converter factory.</param>
            <param name="converterFactory7">The seventh result converter factory.</param>
            <param name="converterFactory8">The eighth result converter factory.</param>
            <param name="converterFactory9">The ninth result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.GetResultSet``10(D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``6},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``7},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``8},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``9})">
            <summary>
            Gets the result set.
            </summary>
            <typeparam name="T1">The type of the first result.</typeparam>
            <typeparam name="T2">The type of the second result.</typeparam>
            <typeparam name="T3">The type of the third result.</typeparam>
            <typeparam name="T4">The type of the forth result.</typeparam>
            <typeparam name="T5">The type of the fifth result.</typeparam>
            <typeparam name="T6">The type of the sixth result.</typeparam>
            <typeparam name="T7">The type of the seventh result.</typeparam>
            <typeparam name="T8">The type of the eighth result.</typeparam>
            <typeparam name="T9">The type of the ninth result.</typeparam>
            <typeparam name="T10">The type of the tenth result.</typeparam>
            <param name="cmd">The database command.</param>
            <param name="converterFactory1">The first result converter factory.</param>
            <param name="converterFactory2">The second result converter factory.</param>
            <param name="converterFactory3">The third result converter factory.</param>
            <param name="converterFactory4">The forth result converter factory.</param>
            <param name="converterFactory5">The fifth result converter factory.</param>
            <param name="converterFactory6">The sixth result converter factory.</param>
            <param name="converterFactory7">The seventh result converter factory.</param>
            <param name="converterFactory8">The eighth result converter factory.</param>
            <param name="converterFactory9">The ninth result converter factory.</param>
            <param name="converterFactory10">The tenth result converter factory.</param>
            <returns>Returns the result set.</returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.Dto.DTObjectDatabase.QueryFormatter">
            <summary>
            Gets the query formatter.
            </summary>
            <value>The query formatter.</value>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0},D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeEnumerator`1"/> class.
            </summary>
            <param name="enumerator">The enumerator.</param>
            <param name="readWriteLock">The read write lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:D2L.LP.Collections.ThreadSafeEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:D2L.LP.Collections.ThreadSafeEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:D2L.Core.Reflection.EnumUtility.#cctor">
            <summary>
            Initializes the <see cref="T:D2L.Core.Reflection.EnumUtility"/> class.
            </summary>
        </member>
        <member name="M:D2L.Core.Reflection.EnumUtility.GetUnderylingValue(System.Object)">
            <summary>
            Gets the underyling enum value.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns the underlying enum value.</returns>
        </member>
        <member name="M:D2L.Core.Reflection.EnumUtility.GetValues``1">
            <summary>
            Gets the enum values.
            </summary>
            <typeparam name="TEnum">The enum type.</typeparam>
            <returns>Returns the enum values.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <typeparamref name="TEnum"/> is not an enum.</exception>
        </member>
        <member name="M:D2L.Core.Reflection.EnumUtility.ParseOrDefault``1(System.String,``0)">
            <summary>
            Parses the enum value or returns the provided default value.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Returns the parsed enum value iff valid, otherwise returns the provided default value.</returns>
        </member>
        <member name="M:D2L.Core.Reflection.EnumUtility.ParseOrDefault``1(System.String,System.Boolean,``0)">
            <summary>
            Parses the enum value or returns the provided default value.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            Returns the parsed enum value iff valid, otherwise returns the provided default value.
            </returns>
        </member>
        <member name="M:D2L.Core.IO.CsvTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.IO.CsvTextWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:D2L.Core.IO.CsvTextWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:D2L.Core.IO.CsvTextWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:D2L.LP.Logging.LogManager.TryInitialize(D2L.LP.Logging.ILogManager)">
            <summary>
            Tries to initializes the log manager.
            </summary>
            <param name="logManager">The log manager.</param>
            <returns>
            Returns true iff this call initalized the log manager; false if the log manager has already been initalized.
            </returns>
        </member>
        <member name="M:D2L.LP.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
            <param name="type">The type.</param>
            <returns>
            Returns the logger for the specified type.
            </returns>
        </member>
        <member name="M:D2L.LP.Logging.LogManager.TryInitializeFromConfig">
            <summary>
            Tries to initialize from config.
            </summary>
        </member>
        <member name="M:D2L.LP.Logging.LogManager.Initialize(D2L.LP.Logging.ILogManager)">
            <summary>
            Initializes the log manager.
            </summary>
            <param name="logManager">The log manager.</param>
        </member>
        <member name="P:D2L.LP.Logging.LogManager.IsInitialized">
            <summary>
            Gets a value indicating whether the log manager has been initialized.
            </summary>
            <value>
            	<c>true</c> if the log manager has been initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.Logging.LogManager.Global">
            <summary>
            Gets the global logging context.
            </summary>
            <value>The global.</value>
        </member>
        <member name="P:D2L.LP.Logging.LogManager.CurrentThread">
            <summary>
            Gets the current thread.
            </summary>
            <value>The current thread.</value>
        </member>
        <member name="P:D2L.LP.Logging.LogManager.CurrentLogicalThread">
            <summary>
            Gets the current logical thread.
            </summary>
            <value>The current logical thread.</value>
        </member>
        <member name="M:D2L.LP.Logging.ILogger.Debug(System.Object)">
            <summary>
            Logs a DEBUG level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILogger.Debug(System.Object,System.Exception)">
            <summary>
            Logs a DEBUG level message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILogger.Info(System.Object)">
            <summary>
            Logs a INFO level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILogger.Info(System.Object,System.Exception)">
            <summary>
            Logs a INFO level message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILogger.Warn(System.Object)">
            <summary>
            Logs a WARN level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILogger.Warn(System.Object,System.Exception)">
            <summary>
            Logs a WARN level message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILogger.Error(System.Object)">
            <summary>
            Logs a ERROR level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILogger.Error(System.Object,System.Exception)">
            <summary>
            Logs a ERROR level message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILogger.Fatal(System.Object)">
            <summary>
            Logs a FATAL level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:D2L.LP.Logging.ILogger.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a FATAL level message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:D2L.LP.Logging.ILogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is logging DEBUG level messages.
            </summary>
            <value>
            	<c>true</c> if this instance is logging DEBUG level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.Logging.ILogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is logging INFO level messages.
            </summary>
            <value>
            	<c>true</c> if this instance is logging INFO level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.Logging.ILogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is logging WARN level messages.
            </summary>
            <value>
            	<c>true</c> if this instance is logging WARN level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.Logging.ILogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is logging ERROR level messages.
            </summary>
            <value>
            	<c>true</c> if this instance is logging ERROR level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.Logging.ILogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is logging FATAL level messages.
            </summary>
            <value>
            	<c>true</c> if this instance is logging FATAL level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:D2L.LP.Logging.LogManager.EarlyLoggerAdapter.#ctor(System.Type,D2L.LP.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Logging.LogManager.EarlyLoggerAdapter"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="P:D2L.LP.Logging.LogManager.EarlyLoggerAdapter.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:D2L.LP.Logging.LogManager.EarlyLoggerAdapter.Inner">
            <summary>
            Gets or sets the inner logger.
            </summary>
            <value>The inner.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlParameter"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.SqlParameter.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:D2L.Core.Data.MsSql.RowVersion.DbTypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            	<c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:D2L.Core.Data.MsSql.RowVersion.DbTypeConverter.ConvertFrom(System.Object)">
            <summary>
            Converts the <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns the converted value.</returns>
        </member>
        <member name="M:D2L.Core.Data.MsSql.RowVersion.DbTypeConverter.ConvertToDb(System.Object,System.Data.DbType@,System.Object@)">
            <summary>
            Converts the <paramref name="value"/> to the representative <paramref name="dbType"/> and <paramref name="dbValue"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="dbType">The db type.</param>
            <param name="dbValue">The db value.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the conversion cannot be done.</exception>
        </member>
        <member name="E:D2L.Core.Data.MsSql.Diagnostics.IQueryPlanNotifier.QueryExecuted">
            <summary>
            Occurs when a query is executed.
            </summary>
        </member>
        <member name="M:D2L.Core.Data.MsSql.Diagnostics.IQueryPlanPublisher.Publish(System.Object,D2L.Core.Data.MsSql.Diagnostics.QueryPlanEventArgs)">
            <summary>
            Publishes a query plan.
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:D2L.Core.Data.MsSql.Diagnostics.QueryPlanBroadcaster.Publish(System.Object,D2L.Core.Data.MsSql.Diagnostics.QueryPlanEventArgs)">
            <summary>
            Publishes a query plan.
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="E:D2L.Core.Data.MsSql.Diagnostics.QueryPlanBroadcaster.QueryExecuted">
            <summary>
            Occurs when a query is executed.
            </summary>
        </member>
        <member name="P:D2L.Core.Data.Events.DbQueryEventArgs.Duration">
            <summary>
            Gets the duration.
            </summary>
        </member>
        <member name="T:D2L.LP.LayeredArch.LoadMoreSortingInfo`1">
            <summary>
            Encapsulates sorting information
            </summary>
        </member>
        <member name="T:D2L.LP.LayeredArch.SortingInfo">
            <summary>
            Encapsulates sorting information
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.SortingInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.SortingInfo"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.SortingInfo.#ctor(System.String,System.Boolean,D2L.LP.Globalization.Collations.Domain.ICollation)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.SortingInfo"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
            <param name="collation">The collation.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.SortingInfo.SortField">
            <summary>
            Gets the sort field.
            </summary>
            <value>The sort field.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.SortingInfo.IsAscending">
            <summary>
            Gets a value indicating whether this field is to be sorted ascending.
            </summary>
            <value>
            	<c>true</c> if this field is to be sorted ascending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.LayeredArch.SortingInfo.Collation">
            <summary>
            Gets or sets the collation.
            </summary>
            <value>The collation.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortingInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.LoadMoreSortingInfo"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortingInfo.#ctor(System.String,System.Boolean,D2L.LP.Globalization.Collations.Domain.ICollation)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.LoadMoreSortingInfo"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
            <param name="collation">The collation.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortingInfo.TryGetExclusiveValue(System.Object@)">
            <summary>
            Tries to get the exclusive value (if one has been set).
            </summary>
            <param name="exclusiveValue">The exclusive value.</param>
            <returns>
            Returns true iff the exclusive value has been set; false otherwise.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortingInfo.Accept(D2L.LP.LayeredArch.ILoadMoreSortingVisitor)">
            <summary>
            Allows a visitor to process the sorting info.
            </summary>
            <param name="visitor">The visitor to apply to the current sorting info.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.LoadMoreSortingInfo.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortingInfo`1.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.SortingInfo"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortingInfo`1.#ctor(System.String,System.Boolean,D2L.LP.Globalization.Collations.Domain.ICollation)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.SortingInfo"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
            <param name="collation">The collation.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortingInfo`1.#ctor(System.String,System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.SortingInfo"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
            <param name="exclusiveValue">The exclusive value.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortingInfo`1.#ctor(System.String,System.Boolean,D2L.LP.Globalization.Collations.Domain.ICollation,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.SortingInfo"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
            <param name="collation">The collation.</param>
            <param name="exclusiveValue">The exclusive value.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortingInfo`1.TryGetExclusiveValue(System.Object@)">
            <summary>
            Tries to get the exclusive value (if one has been set).
            </summary>
            <param name="exclusiveValue">The exclusive value.</param>
            <returns>
            Returns true iff the exclusive value has been set; false otherwise.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortingInfo`1.TryGetExclusiveValue(`0@)">
            <summary>
            Tries to get the exclusive value (if one has been set).
            </summary>
            <param name="exclusiveValue">The exclusive value.</param>
            <returns>
            Returns true iff the exclusive value has been set; false otherwise.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortingInfo`1.Accept(D2L.LP.LayeredArch.ILoadMoreSortingVisitor)">
            <summary>
            Allows a visitor to process the sorting info.
            </summary>
            <param name="visitor">The visitor to apply to the current sorting info.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.LoadMoreSortingInfo`1.ValueType">
            <summary>
            Gets the type of the exclusive value.
            </summary>
            <value>The type of the exclusive value.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.ReadOnlyField`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.ReadOnlyField`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="modified">if set to <c>true</c> [modified].</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.ReadOnlyField`1.#ctor(`0,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.ReadOnlyField`1"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="value">The value.</param>
            <param name="modified">if set to <c>true</c> [modified].</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.ReadOnlyField`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.ReadOnlyField`1.InitialValue">
            <summary>
            Gets the initial value (or the value that was last used to initialize).
            </summary>
            <value>The initial value.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.ReadOnlyField`1.Modified">
            <summary>
            Gets a value indicating whether this field instance has been modified.
            </summary>
            <value><c>true</c> if modified; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ResultEnumeratorAdapterBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.ResultEnumeratorAdapterBase`1"/> class.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IResultEnumerator`2.NextResult">
            <summary>
            Gets the next result.
            </summary>
            <value>The next result.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IResultEnumerator`3.NextResult">
            <summary>
            Gets the next result.
            </summary>
            <value>The next result.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IResultEnumerator`4.NextResult">
            <summary>
            Gets the next result.
            </summary>
            <value>The next result.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IResultEnumerator`5.NextResult">
            <summary>
            Gets the next result.
            </summary>
            <value>The next result.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IResultEnumerator`6.NextResult">
            <summary>
            Gets the next result.
            </summary>
            <value>The next result.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IResultEnumerator`7.NextResult">
            <summary>
            Gets the next result.
            </summary>
            <value>The next result.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IResultEnumerator`8.NextResult">
            <summary>
            Gets the next result.
            </summary>
            <value>The next result.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IResultEnumerator`9.NextResult">
            <summary>
            Gets the next result.
            </summary>
            <value>The next result.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IResultEnumerator`10.NextResult">
            <summary>
            Gets the next result.
            </summary>
            <value>The next result.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IQueryFormatter.AppendOrderByClause(D2L.LP.LayeredArch.Data.SqlCommandBuilder,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo})">
            <summary>
            Appends an order by clause if sorting info is definied.
            </summary>
            <param name="sqlCommandBuilder">The SQL command builder.</param>
            <param name="sortingInfo">The sorting info.</param>
            <remarks>
            If no sorting info is defined, nothing is appended, otherwise
            the appended text is in the format of:
            ' ORDER BY AscField, DescField DESC, OtherField '
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IQueryFormatter.AppendOrderByClause(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo})">
            <summary>
            Appends an order by clause if sorting info is definied.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="sortingInfo">The sorting info.</param>
            <remarks>
            If no sorting info is defined, nothing is appended, otherwise
            the appended text is in the format of:
            ' ORDER BY AscField, DescField DESC, OtherField '
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CachedResultSet.Cache``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Caches the specified items.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="items">The items.</param>
            <returns>Returns a cached instance of the items.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CachedResultSet`2.#ctor(D2L.LP.LayeredArch.Data.IResultSet{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CachedResultSet`2"/> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CachedResultSet`3.#ctor(D2L.LP.LayeredArch.Data.IResultSet{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CachedResultSet`3"/> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CachedResultSet`4.#ctor(D2L.LP.LayeredArch.Data.IResultSet{`0,`1,`2,`3})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CachedResultSet`4"/> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CachedResultSet`5.#ctor(D2L.LP.LayeredArch.Data.IResultSet{`0,`1,`2,`3,`4})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CachedResultSet`5"/> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CachedResultSet`6.#ctor(D2L.LP.LayeredArch.Data.IResultSet{`0,`1,`2,`3,`4,`5})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CachedResultSet`6"/> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CachedResultSet`7.#ctor(D2L.LP.LayeredArch.Data.IResultSet{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CachedResultSet`7"/> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CachedResultSet`8.#ctor(D2L.LP.LayeredArch.Data.IResultSet{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CachedResultSet`8"/> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CachedResultSet`9.#ctor(D2L.LP.LayeredArch.Data.IResultSet{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CachedResultSet`9"/> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CachedResultSet`10.#ctor(D2L.LP.LayeredArch.Data.IResultSet{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CachedResultSet`10"/> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:D2L.Core.Xml.IXmlParser.Parse(System.String)">
            <summary>
            Parses an xml string into an XDocument
            </summary>
            <param name="xml">the xml string</param>
            <returns>an XDocument representing the provided xml</returns>
        </member>
        <member name="M:D2L.Core.Xml.IXmlParser.TryParse(System.String,System.Xml.Linq.XDocument@)">
            <summary>
            Tries to parse an xml string into an XDocument
            </summary>
            <param name="xml">the xml string</param>
            <param name="document">an XDocument representing the provided xml</param>
            <returns>true if parsing was successful, false otherwise</returns>
        </member>
        <member name="M:D2L.Core.Collections.DelegatedEnumerable`1.#ctor(System.Func{System.Collections.Generic.IEnumerator{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Collections.DelegatedEnumerable`1"/> class.
            </summary>
            <param name="enumeratorProvider">The enumerator provider.</param>
        </member>
        <member name="M:D2L.LP.Utilities.KeyedDeferredInitializer`2.#ctor(`1,System.Func{`1,`0},System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Utilities.KeyedDeferredInitializer`2"/> class.
            </summary>
            <param name="initializer">The value initializer function.</param>
            <param name="initializerKey">The initializer key.</param>
            <param name="keySelector">The key selector.</param>
        </member>
        <member name="M:D2L.LP.Utilities.KeyedDeferredInitializer`2.#ctor(`0,System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Utilities.KeyedDeferredInitializer`2"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="keySelector">The key selector.</param>
        </member>
        <member name="M:D2L.LP.Utilities.KeyedDeferredInitializer`2.SetInitialized">
            <summary>
            Sets the initialized.
            </summary>
        </member>
        <member name="M:D2L.LP.Utilities.KeyedDeferredInitializer`2.SetValue(`0,System.Boolean)">
            <summary>
            Sets the value iff this <see cref="T:D2L.LP.Utilities.KeyedDeferredInitializer`2"/> instance has not been initialized.
            </summary>
            <param name="value">The value.</param>
            <param name="onlyIfNotInitialized">if set to <c>true</c> the value is set iff this instance has not already been initialized.</param>
            <returns>Returns true iff the value was set.</returns>
            <remarks>This method provides a thread safe solution.</remarks>
        </member>
        <member name="M:D2L.LP.Utilities.KeyedDeferredInitializer`2.SetValue(System.Func{`0},System.Boolean)">
            <summary>
            Sets the value iff this <see cref="T:D2L.LP.Utilities.KeyedDeferredInitializer`2"/> instance has not been initialized.
            </summary>
            <param name="valueFetcher">The value fetcher.</param>
            <param name="onlyIfNotInitialized">if set to <c>true</c>the value is set iff this instance has not already been initialized.</param>
            <returns>Returns true iff the value was set.</returns>
            <remarks>This method provides a thread safe solution.</remarks>
        </member>
        <member name="P:D2L.LP.Utilities.KeyedDeferredInitializer`2.Value">
            <summary>
            Gets and sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:D2L.LP.Utilities.KeyedDeferredInitializer`2.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
            <value>
            	<c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.Utilities.KeyedDeferredInitializer`2.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
            <remarks>
            If the instance has been initialized, the key selector will be used.
            If the instance has not been initialized, but the initializer key has been set, that initializer key will be returned.
            Otherwise an <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
        </member>
        <member name="T:D2L.LP.LayeredArch.DeferredField`1">
            <summary>
            Field with deferred initialization.
            </summary>
            <typeparam name="T">The field type.</typeparam>
        </member>
        <member name="M:D2L.LP.LayeredArch.DeferredField`1.#ctor(`0,D2L.EqualityComparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.DeferredField`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="equalityComparison">The equality comparison.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.DeferredField`1.#ctor(System.Func{`0},D2L.EqualityComparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.DeferredField`1"/> class.
            </summary>
            <param name="initializer">The initializer function.</param>
            <param name="equalityComparison">The equality comparison.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.DeferredField`1.Initialize(`0)">
            <summary>
            Initializes the field. The specified value will be assigned
            and the modified flag will be set to false.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.DeferredField`1.Initialize(`0,System.Boolean)">
            <summary>
            Initializes the instance with the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="onlyIfNotInitialized">if set to <c>true</c> then the field is initialized iff the field is not already initialized.</param>
            <returns>
            Returns iff this method call initialized the field.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.DeferredField`1.Initialize(System.Func{`0},System.Boolean)">
            <summary>
            Initializes the instance with the specified value.
            </summary>
            <param name="valueFetcher">The value fetcher.</param>
            <param name="onlyIfNotInitialized">if set to <c>true</c> then the field is initialized iff the field is not already initialized.</param>
            <returns>
            Returns iff this method call initialized the field.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.DeferredField`1.CommitChanges">
            <summary>
            Commits the changes made to the field and sets the Modified flag to false.
            </summary>
            <remarks>
            The initial value will now become the current value.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.DeferredField`1.RollbackChanges">
            <summary>
            Rolls back the changes made to the field and sets the Modified flag to false.
            </summary>
            <remarks>
            The value will be returned to the initial value.
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.DeferredField`1.Initialize">
            <summary>
            Initializes the field.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.DeferredField`1.SetInitialized">
            <summary>
            Sets the initialized.
            </summary>
        </member>
        <member name="P:D2L.LP.LayeredArch.DeferredField`1.Value">
            <summary>
            Field value
            </summary>
        </member>
        <member name="P:D2L.LP.LayeredArch.DeferredField`1.InitialValue">
            <summary>
            Gets the initial value (or the value that was last used to initialize).
            </summary>
            <value>The initial value.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.DeferredField`1.Modified">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:D2L.LP.LayeredArch.IField"/> is modified.
            </summary>
            <value><c>true</c> if modified; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.DeferredField`1.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
            <value>
            	<c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DataReaderResultEnumeratorBase`1.#ctor(System.Data.IDataReader,System.Converter{System.Data.IDataRecord,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.DataReaderResultEnumeratorBase`1"/> class.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DataReaderResultEnumeratorBase`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:D2L.LP.LayeredArch.Data.Dto.DataReaderResultEnumeratorBase`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DataReaderResultEnumeratorBase`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DataReaderResultEnumeratorBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DataReaderResultEnumeratorBase`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DataReaderResultEnumeratorBase`1.ReleaseDataReader">
            <summary>
            Releases the reader.
            </summary>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.Dto.DataReaderResultEnumeratorBase`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.Dto.DataReaderResultEnumeratorBase`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.Dto.DataReaderResultEnumeratorBase`1.DataReader">
            <summary>
            Gets the data reader.
            </summary>
            <value>The data reader.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.DataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.DataException"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.DataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.DataException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.DataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.DataException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.DataBindingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.DataBindingException"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.DataBindingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.DataBindingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.DataBindingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.DataBindingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.#ctor(D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/> class.
            </summary>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.#ctor(System.Collections.Generic.IEnumerable{`0},D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.#ctor(System.Int32,D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.Push(`0)">
            <summary>
            Pushes an item to the top of the stack.
            </summary>
            <param name="item">The object to push.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.Clear">
            <summary>
            Removes all items from the stack.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <typeparamref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.Pop">
            <summary>
            Removes and returns the object at the top of the stack.
            </summary>
            <returns>
            The object that is removed from the top of the stack.
            </returns>
            <exception cref="T:System.InvalidOperationException">If the stack is empty.</exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.Peek">
            <summary>
            Returns the object at the top of the stack without removing it.
            </summary>
            <returns>The object at the top of the stack.</returns>
            <exception cref="T:System.InvalidOperationException">If the stack is empty.</exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.TryPop(`0@)">
            <summary>
            Pops and returns the object at the top of the stack.
            </summary>
            <returns>The object that is removed from the top of the stack.</returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the stack if that number is less than 90 percent of current capacity.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:D2L.LP.Collections.ThreadSafeStack`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:D2L.LP.Collections.ThreadSafeStack`1"/>.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.#ctor(D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> class.
            </summary>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0},D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparer">The comparer.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <typeparamref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeHashSet`1.FindFirstOrAdd(System.Predicate{`0},System.Func{`0})">
            <summary>
            Finds and returns first item which satisifies the <paramref name="predicate"/> or addes a new item via <paramref name="valueFetcher"/>.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="valueFetcher">The value fetcher.</param>
            <returns>Returns the item.</returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> is read-only.
            </exception>
        </member>
        <member name="P:D2L.LP.Collections.ThreadSafeHashSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/>.
            </returns>
        </member>
        <member name="P:D2L.LP.Collections.ThreadSafeHashSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:D2L.LP.Collections.ThreadSafeHashSet`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:D2L.Core.IO.CountingTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.IO.CountingTextWriter"/> class.
            </summary>
            <param name="writer">The underlying writer.</param>
        </member>
        <member name="M:D2L.Core.IO.CountingTextWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:D2L.Core.IO.CountingTextWriter.Close">
            <summary>
            Closes the current writer and releases any system resources associated with the writer.
            </summary>
        </member>
        <member name="M:D2L.Core.IO.CountingTextWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:D2L.Core.IO.CountingTextWriter.Write(System.Char)">
            <summary>
            A write helper method.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:D2L.Core.IO.CountingTextWriter.Write(System.String)">
            <summary>
            A write helper method.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:D2L.Core.IO.CountingTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            A write helper method.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="index">The start index in the buffer.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="P:D2L.Core.IO.CountingTextWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            <value></value>
            <returns>
            The Encoding in which the output is written.
            </returns>
        </member>
        <member name="P:D2L.Core.IO.CountingTextWriter.FormatProvider">
            <summary>
            Gets an object that controls formatting.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.IFormatProvider"/> object for a specific culture, or the formatting of the current culture if no other culture is specified.
            </returns>
        </member>
        <member name="P:D2L.Core.IO.CountingTextWriter.NewLine">
            <summary>
            Gets or sets the line terminator string used by the current TextWriter.
            </summary>
            <value></value>
            <returns>
            The line terminator string for the current TextWriter.
            </returns>
        </member>
        <member name="P:D2L.Core.IO.CountingTextWriter.BytesCount">
            <summary>
            Gets the bytes count.
            </summary>
            <value>The bytes count.</value>
        </member>
        <member name="T:D2L.Core.Comparisons.NullableComparer">
            <summary>
            A utility class for safely comparing values which can be <value>null</value>.
            </summary>
            <remarks><value>null</value> is consider to come before all non-null values.</remarks>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.Compare``1(System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Compares the two nullable values <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>Returns the compairson result.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.Compare``1(System.Nullable{``0},``0)">
            <summary>
            Compares the two nullable values <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>Returns the compairson result.</returns>
            <remarks><value>null</value> is consider to come before all non-null values.</remarks>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.Compare``1(``0,System.Nullable{``0})">
            <summary>
            Compares the two nullable values <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>Returns the compairson result.</returns>
            <remarks><value>null</value> is consider to come before all non-null values.</remarks>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.Compare``1(``0,``0)">
            <summary>
            Compares the two values with NULL awareness, where NULL is consider to be less than non-NULL values.
            </summary>
            <typeparam name="T">The type to be compared.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than 0 x is less than y.  0 x equals y.  Greater than 0 x is greater than y.
            </returns>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.Compare``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Compares the two values with NULL awareness, where NULL is consider to be less than non-NULL values.
            </summary>
            <typeparam name="T">The type to be compared.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="nonNullComparer">The non NULL comparer.</param>
            <returns>
            Value Condition Less than 0 x is less than y.  0 x equals y.  Greater than 0 x is greater than y.
            </returns>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.Compare``1(``0,``0,System.Comparison{``0})">
            <summary>
            Compares the two values with NULL awareness, where NULL is consider to be less than non-NULL values.
            </summary>
            <typeparam name="T">The type to be compared.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="nonNullComparison">A function to compare the non null values of T.</param>
            <returns>
            Value Condition Less than 0 x is less than y.  0 x equals y.  Greater than 0 x is greater than y.
            </returns>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.Compare``1(``0,``0,System.Func{System.Int32})">
            <summary>
            Compares the two values with NULL awareness, where NULL is consider to be less than non-NULL values.
            </summary>
            <typeparam name="T">The type to be compared.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="nonNullComparison">A function to compare the non null values of T.</param>
            <returns>
            Value Condition Less than 0 x is less than y.  0 x equals y.  Greater than 0 x is greater than y.
            </returns>
            <remarks>
            This method is intended to help the readability of cases where nested statements
            are used.
            </remarks>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.AreEqual``1(System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Determines if the two values <paramref name="x"/> and <paramref name="y"/> are equal.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="x">The first value of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second value of type <typeparamref name="T"/> to compare.</param>
            <returns>Returns true iff the values are equal.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.AreEqual``1(``0,System.Nullable{``0})">
            <summary>
            Determines if the two values <paramref name="x"/> and <paramref name="y"/> are equal.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="x">The first value of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second value of type <typeparamref name="T"/> to compare.</param>
            <returns>Returns true iff the values are equal.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.AreEqual``1(System.Nullable{``0},``0)">
            <summary>
            Determines if the two values <paramref name="x"/> and <paramref name="y"/> are equal.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="x">The first value of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second value of type <typeparamref name="T"/> to compare.</param>
            <returns>Returns true iff the values are equal.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.AreEqual``1(``0,``0)">
            <summary>
            Determines if the two values <paramref name="x"/> and <paramref name="y"/> are equal.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="x">The first value of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second value of type <typeparamref name="T"/> to compare.</param>
            <returns>Returns true iff the values are equal.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the two values <paramref name="x"/> and <paramref name="y"/> are equal.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="x">The first value of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second value of type <typeparamref name="T"/> to compare.</param>
            <param name="nonNullEqualityComparer">The non null equality comparer.</param>
            <returns>Returns true iff the values are equal.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.AreEqual``1(``0,``0,D2L.EqualityComparison{``0})">
            <summary>
            Determines if the two values <paramref name="x"/> and <paramref name="y"/> are equal.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="x">The first value of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second value of type <typeparamref name="T"/> to compare.</param>
            <param name="nonNullEqualityComparer">The non null equality comparer.</param>
            <returns>Returns true iff the values are equal.</returns>
        </member>
        <member name="M:D2L.Core.Comparisons.NullableComparer.AreEqual``1(``0,``0,System.Func{System.Boolean})">
            <summary>
            Determines if the two values <paramref name="x"/> and <paramref name="y"/> are equal.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="x">The first value of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second value of type <typeparamref name="T"/> to compare.</param>
            <param name="nonNullEqualityComparer">The non null equality comparer.</param>
            <returns>Returns true iff the values are equal.</returns>
            <remarks>
            This method is intended to help the readability of cases where nested statements
            are used.
            </remarks>
        </member>
        <member name="M:D2L.Core.Comparisons.EqualityComparerAdapter`1.#ctor(D2L.EqualityComparison{`0},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Comparisons.EqualityComparerAdapter`1"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
            <param name="hashCodeFetcher">The hash code fetcher.</param>
        </member>
        <member name="M:D2L.Core.Comparisons.EqualityComparerAdapter`1.#ctor(System.Collections.Generic.IComparer{`0},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Comparisons.EqualityComparerAdapter`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="hashCodeFetcher">The hash code fetcher.</param>
        </member>
        <member name="M:D2L.Core.Comparisons.EqualityComparerAdapter`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:D2L.Core.Comparisons.EqualityComparerAdapter`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.
            </exception>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DataReaderConverterObjectEnumerable`1.#ctor(D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.DataReaderConverterObjectEnumerable`1"/> class.
            </summary>
            <param name="converterFactory">The converter factory.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DataReaderConverterObjectEnumerable`1.ExecuteReader">
            <summary>
            Executes the data reader.
            </summary>
            <returns>Returns the data reader.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.PropertyBinder`1.#cctor">
            <summary>
            Initializes the <see cref="T:D2L.LP.LayeredArch.Data.PropertyBinder`1"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.PropertyBinder`1.GetPropertyBindings(System.Data.IDataRecord,D2L.LP.LayeredArch.Data.IDatabaseFieldMapper)">
            <summary>
            Gets the property bindings.
            </summary>
            <param name="initDataRecord">The init data record.</param>
            <param name="dbFieldMapper">The property mapper.</param>
            <returns>Returns the property info.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.PropertyBinder`1.ValidatePropertyMappings(D2L.LP.LayeredArch.Data.PropertyBinder{`0}.PropertyMappingInfo[])">
            <summary>
            Validates the property mappings.
            </summary>
            <param name="mappings">The mappings.</param>
        </member>
        <member name="T:D2L.LP.LayeredArch.Data.PropertyBinder`1.MatchedFieldsFactory">
            <summary>
            A data object factory that binds the matching fields in a data record
            to the data transfer object.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.PropertyBinder`1.MatchedFieldsFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.PropertyBinder`1.MatchedFieldsFactory"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.PropertyBinder`1.MatchedFieldsFactory.#ctor(D2L.LP.LayeredArch.Data.IDatabaseFieldMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.PropertyBinder`1.MatchedFieldsFactory"/> class.
            </summary>
            <param name="dbFieldMapper">The property mapper.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.PropertyBinder`1.MatchedFieldsFactory.Create(System.Data.IDataRecord)">
            <summary>
            Creates the converter.
            </summary>
            <param name="initDataRecord">The data record.</param>
            <returns>Returns the converter.</returns>
        </member>
        <member name="T:D2L.LP.LayeredArch.Data.PropertyBinder`1.AllFieldsFactory">
            <summary>
            A data object factory that binds all the fields in a data record
            to the data transfer object.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.PropertyBinder`1.AllFieldsFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.PropertyBinder`1.AllFieldsFactory"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.PropertyBinder`1.AllFieldsFactory.#ctor(D2L.LP.LayeredArch.Data.IDatabaseFieldMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.PropertyBinder`1.AllFieldsFactory"/> class.
            </summary>
            <param name="dbFieldMapper">The property mapper.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.PropertyBinder`1.AllFieldsFactory.Create(System.Data.IDataRecord)">
            <summary>
            Creates the converter.
            </summary>
            <param name="initDataRecord">The data record.</param>
            <returns>Returns the converter.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IOutputSqlParameter.Assign(System.Object)">
            <summary>
            Assigns the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IOutputSqlParameter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IOutputSqlParameter.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IOutputSqlParameter.DbSize">
            <summary>
            Gets the size of the database value.
            </summary>
            <value>The size of the database value.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTO`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTO`2"/> class.
            </summary>
            <param name="first">The first DTO.</param>
            <param name="second">The second DTO.</param>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`2.m_first">
            <summary>
            Gets the first DTO.
            </summary>
            <value>The first DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`2.m_second">
            <summary>
            Gets the second DTO.
            </summary>
            <value>The second DTO.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTO`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTO`2"/> class.
            </summary>
            <param name="first">The first DTO.</param>
            <param name="second">The second DTO.</param>
            <param name="third">The third DTO.</param>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`3.m_first">
            <summary>
            Gets the first DTO.
            </summary>
            <value>The first DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`3.m_second">
            <summary>
            Gets the second DTO.
            </summary>
            <value>The second DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`3.m_third">
            <summary>
            Gets the third DTO.
            </summary>
            <value>The third DTO.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTO`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTO`2"/> class.
            </summary>
            <param name="first">The first DTO.</param>
            <param name="second">The second DTO.</param>
            <param name="third">The third DTO.</param>
            <param name="forth">The forth DTO.</param>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`4.m_first">
            <summary>
            Gets the first DTO.
            </summary>
            <value>The first DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`4.m_second">
            <summary>
            Gets the second DTO.
            </summary>
            <value>The second DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`4.m_third">
            <summary>
            Gets the third DTO.
            </summary>
            <value>The third DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`4.m_forth">
            <summary>
            Gets the forth DTO.
            </summary>
            <value>The forth DTO.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTO`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTO`2"/> class.
            </summary>
            <param name="first">The first DTO.</param>
            <param name="second">The second DTO.</param>
            <param name="third">The third DTO.</param>
            <param name="forth">The forth DTO.</param>
            <param name="fifth">The fifth DTO.</param>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`5.m_first">
            <summary>
            Gets the first DTO.
            </summary>
            <value>The first DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`5.m_second">
            <summary>
            Gets the second DTO.
            </summary>
            <value>The second DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`5.m_third">
            <summary>
            Gets the third DTO.
            </summary>
            <value>The third DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`5.m_forth">
            <summary>
            Gets the forth DTO.
            </summary>
            <value>The forth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`5.m_fifth">
            <summary>
            Gets the fifth DTO.
            </summary>
            <value>The fifth DTO.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTO`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTO`2"/> class.
            </summary>
            <param name="first">The first DTO.</param>
            <param name="second">The second DTO.</param>
            <param name="third">The third DTO.</param>
            <param name="forth">The forth DTO.</param>
            <param name="fifth">The fifth DTO.</param>
            <param name="sixth">The sixth.</param>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`6.m_first">
            <summary>
            Gets the first DTO.
            </summary>
            <value>The first DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`6.m_second">
            <summary>
            Gets the second DTO.
            </summary>
            <value>The second DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`6.m_third">
            <summary>
            Gets the third DTO.
            </summary>
            <value>The third DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`6.m_forth">
            <summary>
            Gets the forth DTO.
            </summary>
            <value>The forth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`6.m_fifth">
            <summary>
            Gets the fifth DTO.
            </summary>
            <value>The fifth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`6.m_sixth">
            <summary>
            Gets the sixth DTO.
            </summary>
            <value>The sixth DTO.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTO`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTO`2"/> class.
            </summary>
            <param name="first">The first DTO.</param>
            <param name="second">The second DTO.</param>
            <param name="third">The third DTO.</param>
            <param name="forth">The forth DTO.</param>
            <param name="fifth">The fifth DTO.</param>
            <param name="sixth">The sixth.</param>
            <param name="seventh">The seventh.</param>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`7.m_first">
            <summary>
            Gets the first DTO.
            </summary>
            <value>The first DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`7.m_second">
            <summary>
            Gets the second DTO.
            </summary>
            <value>The second DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`7.m_third">
            <summary>
            Gets the third DTO.
            </summary>
            <value>The third DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`7.m_forth">
            <summary>
            Gets the forth DTO.
            </summary>
            <value>The forth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`7.m_fifth">
            <summary>
            Gets the fifth DTO.
            </summary>
            <value>The fifth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`7.m_sixth">
            <summary>
            Gets the sixth DTO.
            </summary>
            <value>The sixth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`7.m_seventh">
            <summary>
            Gets the seventh DTO.
            </summary>
            <value>The seventh DTO.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTO`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTO`2"/> class.
            </summary>
            <param name="first">The first DTO.</param>
            <param name="second">The second DTO.</param>
            <param name="third">The third DTO.</param>
            <param name="forth">The forth DTO.</param>
            <param name="fifth">The fifth DTO.</param>
            <param name="sixth">The sixth.</param>
            <param name="seventh">The seventh.</param>
            <param name="eighth">The eighth.</param>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`8.m_first">
            <summary>
            Gets the first DTO.
            </summary>
            <value>The first DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`8.m_second">
            <summary>
            Gets the second DTO.
            </summary>
            <value>The second DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`8.m_third">
            <summary>
            Gets the third DTO.
            </summary>
            <value>The third DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`8.m_forth">
            <summary>
            Gets the forth DTO.
            </summary>
            <value>The forth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`8.m_fifth">
            <summary>
            Gets the fifth DTO.
            </summary>
            <value>The fifth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`8.m_sixth">
            <summary>
            Gets the sixth DTO.
            </summary>
            <value>The sixth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`8.m_seventh">
            <summary>
            Gets the seventh DTO.
            </summary>
            <value>The seventh DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`8.m_eighth">
            <summary>
            Gets the eighth DTO.
            </summary>
            <value>The eighth DTO.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTO`9.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTO`2"/> class.
            </summary>
            <param name="first">The first DTO.</param>
            <param name="second">The second DTO.</param>
            <param name="third">The third DTO.</param>
            <param name="forth">The forth DTO.</param>
            <param name="fifth">The fifth DTO.</param>
            <param name="sixth">The sixth.</param>
            <param name="seventh">The seventh.</param>
            <param name="eighth">The eighth.</param>
            <param name="ninth">The ninth.</param>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`9.m_first">
            <summary>
            Gets the first DTO.
            </summary>
            <value>The first DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`9.m_second">
            <summary>
            Gets the second DTO.
            </summary>
            <value>The second DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`9.m_third">
            <summary>
            Gets the third DTO.
            </summary>
            <value>The third DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`9.m_forth">
            <summary>
            Gets the forth DTO.
            </summary>
            <value>The forth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`9.m_fifth">
            <summary>
            Gets the fifth DTO.
            </summary>
            <value>The fifth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`9.m_sixth">
            <summary>
            Gets the sixth DTO.
            </summary>
            <value>The sixth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`9.m_seventh">
            <summary>
            Gets the seventh DTO.
            </summary>
            <value>The seventh DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`9.m_eighth">
            <summary>
            Gets the eighth DTO.
            </summary>
            <value>The eighth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`9.m_ninth">
            <summary>
            Gets the ninth DTO.
            </summary>
            <value>The ninth DTO.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTO`10.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTO`2"/> class.
            </summary>
            <param name="first">The first DTO.</param>
            <param name="second">The second DTO.</param>
            <param name="third">The third DTO.</param>
            <param name="forth">The forth DTO.</param>
            <param name="fifth">The fifth DTO.</param>
            <param name="sixth">The sixth.</param>
            <param name="seventh">The seventh.</param>
            <param name="eighth">The eighth.</param>
            <param name="ninth">The ninth.</param>
            <param name="tenth">The tenth.</param>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`10.m_first">
            <summary>
            Gets the first DTO.
            </summary>
            <value>The first DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`10.m_second">
            <summary>
            Gets the second DTO.
            </summary>
            <value>The second DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`10.m_third">
            <summary>
            Gets the third DTO.
            </summary>
            <value>The third DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`10.m_forth">
            <summary>
            Gets the forth DTO.
            </summary>
            <value>The forth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`10.m_fifth">
            <summary>
            Gets the fifth DTO.
            </summary>
            <value>The fifth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`10.m_sixth">
            <summary>
            Gets the sixth DTO.
            </summary>
            <value>The sixth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`10.m_seventh">
            <summary>
            Gets the seventh DTO.
            </summary>
            <value>The seventh DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`10.m_eighth">
            <summary>
            Gets the eighth DTO.
            </summary>
            <value>The eighth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`10.m_ninth">
            <summary>
            Gets the ninth DTO.
            </summary>
            <value>The ninth DTO.</value>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.CompositeDTO`10.m_tenth">
            <summary>
            Gets the tenth DTO.
            </summary>
            <value>The tenth DTO.</value>
        </member>
        <member name="M:D2L.Core.Reflection.CSharpTypeNameFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Reflection.CSharpTypeNameFormatter"/> class.
            </summary>
        </member>
        <member name="M:D2L.Core.Reflection.CSharpTypeNameFormatter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Reflection.CSharpTypeNameFormatter"/> class.
            </summary>
            <param name="doNotUseKeywordTypeNames">if set to <c>true</c> [do not use keyword type names].</param>
        </member>
        <member name="M:D2L.Core.Reflection.CSharpTypeNameFormatter.FormatName(System.Type)">
            <summary>
            Formats the C# type name.
            </summary>
            <param name="type">The type.</param>
            <returns>Returns the formatted type name.</returns>
        </member>
        <member name="M:D2L.Core.Reflection.CSharpTypeNameFormatter.FormatFullName(System.Type)">
            <summary>
            Formats the full C# type name.
            </summary>
            <param name="type">The type.</param>
            <returns>Returns the full formatted type name.</returns>
        </member>
        <member name="M:D2L.Core.Collections.EmptyEnumerator`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Collections.EmptyEnumerator`1"/> class.
            </summary>
        </member>
        <member name="P:D2L.Core.Collections.EmptyEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.MsSql.MsSqlDatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.MsSql.MsSqlDatabase"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.MsSql.MsSqlDatabase.#ctor(System.String,System.Func{System.Data.IDbConnection,System.Data.IDbConnection})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.MsSql.MsSqlDatabase"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="connectionWrapper">The connection wrapper.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.MsSql.MsSqlDatabase.CreateConnection">
            <summary>
            Creates the connection.
            </summary>
            <returns>Returns the connection.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.MsSql.MsSqlDatabase.MapDatabaseParameter(System.Type,System.Object,System.Data.DbType@,System.Object@)">
            <summary>
            Maps the parameter to a database parameter.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="value">The value.</param>
            <param name="dbType">Type of the db.</param>
            <param name="dbValue">The db value.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.MsSql.MsSqlDatabase.FormatInlineDatabaseParameter(System.Data.DbType,System.Object)">
            <summary>
            Formats the inline database parameter.
            </summary>
            <param name="dbType">Type of the db.</param>
            <param name="dbValue">The db value.</param>
            <returns>
            Returns the inline parameter representation.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.MsSql.MsSqlExtendedDatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.MsSql.MsSqlExtendedDatabase"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.MsSql.MsSqlExtendedDatabase.#ctor(System.String,System.Func{System.Data.IDbConnection,System.Data.IDbConnection})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.MsSql.MsSqlExtendedDatabase"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="connectionWrapper">The connection wrapper.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.MsSql.MsSqlExtendedDatabase.ExecutePagedReaderQuery(D2L.LP.LayeredArch.Data.SqlTextCommand,D2L.LP.LayeredArch.PagingInfo,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo})">
            <summary>
            Executes a paged reader query.
            </summary>
            <param name="command">The command.</param>
            <param name="pagingInfo">The paging info.</param>
            <param name="sortInfo">The sort info.</param>
            <returns>
            Returns a data reader where the first result set contains
            the total object count, and the second result set contains
            the command's query results.
            </returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.MsSql.MsSqlExtendedDatabase.QueryFormatter">
            <summary>
            Gets the query formatter.
            </summary>
            <value>The query formatter.</value>
        </member>
        <member name="M:D2L.LP.Logging.Contexts.ILoggingContextProperties.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Returns true iff the value existed.</returns>
        </member>
        <member name="M:D2L.LP.Logging.Contexts.ILoggingContextProperties.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:D2L.LP.Logging.Contexts.ILoggingContextProperties.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:D2L.LP.Logging.Contexts.ILoggingContextProperties.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:D2L.LP.Logging.Contexts.ILoggingContextProperties.Item(System.String)">
            <summary>
            Gets and sets the context property with the specified key.
            </summary>
            <value>The context property value.</value>
            <exception cref="T:System.ArgumentNullException">If the key is null.</exception>
        </member>
        <member name="M:D2L.LP.Logging.Configuration.ILogManagerFactory.Create(System.String)">
            <summary>
            Creates the log manager.
            </summary>
            <param name="configuration">The configuration.</param>
            <returns>Returns the log manager.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ValuedSqlParameter`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.ValuedSqlParameter`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.ValuedSqlParameter`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectEnumerable`1.#ctor(D2L.LP.LayeredArch.Data.IDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.SqlCommandObjectEnumerable`1"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="command">The command.</param>
            <param name="converterFactory">The converter factory.</param>
        </member>
        <member name="T:D2L.Core.Xml.ArrayXmlFormatter`1">
            <summary>
            A helper class for formatting an array as XML, and parsing that XML.
            </summary>
            <typeparam name="T">The array's item type.</typeparam>
        </member>
        <member name="M:D2L.Core.Xml.ArrayXmlFormatter`1.#ctor(System.String,System.String,System.Func{`0,System.String},System.Func{System.String,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Xml.ArrayXmlFormatter`1"/> class.
            </summary>
            <param name="rootElementName">The root element's name.</param>
            <param name="itemElementsName">The item elements' name.</param>
            <param name="itemValueFormatter">The item value formatter.</param>
            <param name="itemValueParser">The item value parser.</param>
        </member>
        <member name="M:D2L.Core.Xml.ArrayXmlFormatter`1.FormatXml(`0[])">
            <summary>
            Formats the XML.
            </summary>
            <param name="items">The items.</param>
            <returns>Returns the formatted xml.</returns>
        </member>
        <member name="M:D2L.Core.Xml.ArrayXmlFormatter`1.FormatXml(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Formats the XML.
            </summary>
            <param name="items">The items.</param>
            <returns>Returns the formatted xml.</returns>
        </member>
        <member name="M:D2L.Core.Xml.ArrayXmlFormatter`1.ParseItemsXml(System.String)">
            <summary>
            Parses the items from the XML.
            </summary>
            <param name="xml">The XML.</param>
            <returns>Returns the items.</returns>
        </member>
        <member name="P:D2L.Core.Xml.ArrayXmlFormatter`1.RootElementName">
            <summary>
            Gets or sets the name of the root element.
            </summary>
            <value>The name of the root element.</value>
        </member>
        <member name="P:D2L.Core.Xml.ArrayXmlFormatter`1.ItemElementsName">
            <summary>
            Gets or sets the name of the item elements.
            </summary>
            <value>The name of the item elements.</value>
        </member>
        <member name="T:D2L.Core.Transactions.StatefulTransaction">
            <summary>
            An implementation of the <see cref="T:D2L.Core.Transactions.IStatefulTransaction"/> interface.
            </summary>
        </member>
        <member name="M:D2L.Core.Transactions.IStatefulTransaction.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:D2L.Core.Transactions.IStatefulTransaction.TryGetState(System.String,System.Object@)">
            <summary>
            Tries to get the <paramref name="state"/> object for the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="state">The state.</param>
            <returns>Returs true iff the state could be retrieved; false otherwise.</returns>
        </member>
        <member name="M:D2L.Core.Transactions.IStatefulTransaction.GetState(System.String,System.Func{System.Object})">
            <summary>
            Gets the state object for the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="getter">
            The delegate method which gets the state, in the case where the 
            transaction does not already contain state for the specified 
            <paramref name="key"/>.</param>
            <returns>
            Returns the state object for the specified <paramref name="key"/>.
            </returns>
        </member>
        <member name="E:D2L.Core.Transactions.IStatefulTransaction.Completed">
            <summary>
            Occurs when the transaction is [completed].
            </summary>
        </member>
        <member name="M:D2L.Core.Transactions.StatefulTransaction.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:D2L.Core.Transactions.StatefulTransaction.TryGetState(System.String,System.Object@)">
            <summary>
            Tries to get the <paramref name="state"/> object for the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="state">The state.</param>
            <returns>
            Returs true iff the state could be retrieved; false otherwise.
            </returns>
        </member>
        <member name="M:D2L.Core.Transactions.StatefulTransaction.GetState(System.String,System.Func{System.Object})">
            <summary>
            Gets the state object for the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="getter">The delegate method which gets the state, in the case where the
            transaction does not already contain state for the specified
            <paramref name="key"/>.</param>
            <returns>
            Returns the state object for the specified <paramref name="key"/>.
            </returns>
        </member>
        <member name="M:D2L.Core.Transactions.StatefulTransaction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:D2L.Core.Transactions.StatefulTransaction.OnCompleted(D2L.Core.Transactions.TransactionActions)">
            <summary>
            Called when [completed].
            </summary>
            <param name="action">The transaction action.</param>
        </member>
        <member name="E:D2L.Core.Transactions.StatefulTransaction.Completed">
            <summary>
            Occurs when the transaction is [completed].
            </summary>
        </member>
        <member name="E:D2L.Core.Data.Events.IDbCommandEventNotifier.CommandExecuted">
            <summary>
            Occurs when a command is executed.
            </summary>
        </member>
        <member name="M:D2L.Core.Data.Events.DbCommandEventBroadcaster.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Data.Events.DbCommandEventBroadcaster"/> class.
            </summary>
        </member>
        <member name="M:D2L.Core.Data.Events.DbCommandEventBroadcaster.Publish(System.Object,D2L.Core.Data.Events.DbCommandEventArgs)">
            <summary>
            Publishes the specified database command event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:D2L.Core.Data.Events.DbCommandEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:D2L.Core.Data.Events.DbCommandEventBroadcaster.CommandExecuted">
            <summary>
            Occurs when a command is executed.
            </summary>
        </member>
        <member name="T:D2L.Core.Utilities.ReferenceCountingDisposableBase">
            <summary>
            A base class for reference counting adapter objects.
            </summary>
        </member>
        <member name="M:D2L.Core.Utilities.ReferenceCountingDisposableBase.IncrementReferenceCount">
            <summary>
            Increments the reference count if the object has not already been diposed.
            </summary>
            <returns>Returns true iff the reference count was incremented; false if the object has already been disposed.</returns>
        </member>
        <member name="M:D2L.Core.Utilities.ReferenceCountingDisposableBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:D2L.Core.Utilities.ReferenceCountingDisposableBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:D2L.Core.Utilities.ReferenceCountingDisposableBase.References">
            <summary>
            Gets the number of references.
            </summary>
        </member>
        <member name="T:D2L.LP.LayeredArch.LoadMoreSortInfo`2">
            <summary>
            Encapsulates sorting information
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.SortInfo`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.SortInfo`1"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.SortInfo`1.#ctor(`0,System.Boolean,D2L.LP.Globalization.Collations.Domain.ICollation)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.SortInfo`1"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
            <param name="collation">The collation.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.SortInfo`1.SortField">
            <summary>
            Gets the sort field.
            </summary>
            <value>The sort field.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.SortInfo`1.IsAscending">
            <summary>
            Gets a value indicating whether this field is to be sorted ascending.
            </summary>
            <value>
            	<c>true</c> if this field is to be sorted ascending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:D2L.LP.LayeredArch.SortInfo`1.Collation">
            <summary>
            Gets or sets the collation.
            </summary>
            <value>The collation.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortInfo`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.LoadMoreSortInfo`1"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortInfo`1.#ctor(`0,System.Boolean,D2L.LP.Globalization.Collations.Domain.ICollation)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.LoadMoreSortInfo`1"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
            <param name="collation">The collation.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortInfo`1.TryGetExclusiveValue(System.Object@)">
            <summary>
            Tries to get the exclusive value (if one has been set).
            </summary>
            <param name="exclusiveValue">The exclusive value.</param>
            <returns>
            Returns true iff the exclusive value has been set; false otherwise.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortInfo`1.Accept(D2L.LP.LayeredArch.ILoadMoreSortInfoVisitor{`0})">
            <summary>
            Allows a visitor to process the sorting info.
            </summary>
            <param name="visitor">The visitor to apply to the current sorting info.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.LoadMoreSortInfo`1.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortInfo`2.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.LoadMoreSortInfo`2"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortInfo`2.#ctor(`0,System.Boolean,D2L.LP.Globalization.Collations.Domain.ICollation)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.LoadMoreSortInfo`2"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
            <param name="collation">The collation.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortInfo`2.#ctor(`0,System.Boolean,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.LoadMoreSortInfo`2"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
            <param name="exclusiveValue">The exclusive value.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortInfo`2.#ctor(`0,System.Boolean,D2L.LP.Globalization.Collations.Domain.ICollation,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.SortingInfo"/> class.
            </summary>
            <param name="sortField">The sort field.</param>
            <param name="isAscending">if set to <c>true</c> [is ascending].</param>
            <param name="collation">The collation.</param>
            <param name="exclusiveValue">The exclusive value.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortInfo`2.TryGetExclusiveValue(System.Object@)">
            <summary>
            Tries to get the exclusive value (if one has been set).
            </summary>
            <param name="exclusiveValue">The exclusive value.</param>
            <returns>
            Returns true iff the exclusive value has been set; false otherwise.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortInfo`2.TryGetExclusiveValue(`1@)">
            <summary>
            Tries to get the exclusive value (if one has been set).
            </summary>
            <param name="exclusiveValue">The exclusive value.</param>
            <returns>
            Returns true iff the exclusive value has been set; false otherwise.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.LoadMoreSortInfo`2.Accept(D2L.LP.LayeredArch.ILoadMoreSortInfoVisitor{`0})">
            <summary>
            Allows a visitor to process the sorting info.
            </summary>
            <param name="visitor">The visitor to apply to the current sorting info.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.LoadMoreSortInfo`2.ValueType">
            <summary>
            Gets the type of the exclusive value.
            </summary>
            <value>The type of the exclusive value.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IReturnValueSqlParameter.Assign(System.Object)">
            <summary>
            Assigns the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IReturnValueSqlParameter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IReturnValueSqlParameter.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.IReturnValueSqlParameter.DbSize">
            <summary>
            Gets the size of the database type.
            </summary>
            <value>The size of the database type.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`3.#ctor(D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},System.Func{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`3"/> class.
            </summary>
            <param name="firstConverterFactory">The first converter factory.</param>
            <param name="secondConverterFactory">The second converter factory.</param>
            <param name="consturctor">The consturctor.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`4.#ctor(D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},System.Func{`0,`1,`2,`3})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`4"/> class.
            </summary>
            <param name="firstConverterFactory">The first converter factory.</param>
            <param name="secondConverterFactory">The second converter factory.</param>
            <param name="thirdConverterFactory">The third converter factory.</param>
            <param name="consturctor">The consturctor.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`5.#ctor(D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},System.Func{`0,`1,`2,`3,`4})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`5"/> class.
            </summary>
            <param name="firstConverterFactory">The first converter factory.</param>
            <param name="secondConverterFactory">The second converter factory.</param>
            <param name="thirdConverterFactory">The third converter factory.</param>
            <param name="forthConverterFactory">The forth converter factory.</param>
            <param name="consturctor">The consturctor.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`6.#ctor(D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`4},System.Func{`0,`1,`2,`3,`4,`5})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`6"/> class.
            </summary>
            <param name="firstConverterFactory">The first converter factory.</param>
            <param name="secondConverterFactory">The second converter factory.</param>
            <param name="thirdConverterFactory">The third converter factory.</param>
            <param name="forthConverterFactory">The forth converter factory.</param>
            <param name="fifthConverterFactory">The fifth converter factory.</param>
            <param name="consturctor">The consturctor.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`7.#ctor(D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`5},System.Func{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`7"/> class.
            </summary>
            <param name="firstConverterFactory">The first converter factory.</param>
            <param name="secondConverterFactory">The second converter factory.</param>
            <param name="thirdConverterFactory">The third converter factory.</param>
            <param name="forthConverterFactory">The forth converter factory.</param>
            <param name="fifthConverterFactory">The fifth converter factory.</param>
            <param name="sixthConverterFactory">The sixth converter factory.</param>
            <param name="consturctor">The consturctor.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`8.#ctor(D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`6},System.Func{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`8"/> class.
            </summary>
            <param name="firstConverterFactory">The first converter factory.</param>
            <param name="secondConverterFactory">The second converter factory.</param>
            <param name="thirdConverterFactory">The third converter factory.</param>
            <param name="forthConverterFactory">The forth converter factory.</param>
            <param name="fifthConverterFactory">The fifth converter factory.</param>
            <param name="sixthConverterFactory">The sixth converter factory.</param>
            <param name="seventhConverterFactory">The seventh converter factory.</param>
            <param name="consturctor">The consturctor.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`9.#ctor(D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`6},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`7},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`9"/> class.
            </summary>
            <param name="firstConverterFactory">The first converter factory.</param>
            <param name="secondConverterFactory">The second converter factory.</param>
            <param name="thirdConverterFactory">The third converter factory.</param>
            <param name="forthConverterFactory">The forth converter factory.</param>
            <param name="fifthConverterFactory">The fifth converter factory.</param>
            <param name="sixthConverterFactory">The sixth converter factory.</param>
            <param name="seventhConverterFactory">The seventh converter factory.</param>
            <param name="eighthConverterFactory">The eighth converter factory.</param>
            <param name="consturctor">The consturctor.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`10.#ctor(D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`6},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`7},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`8},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`10"/> class.
            </summary>
            <param name="firstConverterFactory">The first converter factory.</param>
            <param name="secondConverterFactory">The second converter factory.</param>
            <param name="thirdConverterFactory">The third converter factory.</param>
            <param name="forthConverterFactory">The forth converter factory.</param>
            <param name="fifthConverterFactory">The fifth converter factory.</param>
            <param name="sixthConverterFactory">The sixth converter factory.</param>
            <param name="seventhConverterFactory">The seventh converter factory.</param>
            <param name="eighthConverterFactory">The eighth converter factory.</param>
            <param name="ninthConverterFactory">The ninth converter factory.</param>
            <param name="consturctor">The consturctor.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`11.#ctor(D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`1},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`2},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`3},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`4},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`5},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`6},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`7},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`8},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`9},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.CompositeDTOFactoryBase`11"/> class.
            </summary>
            <param name="firstConverterFactory">The first converter factory.</param>
            <param name="secondConverterFactory">The second converter factory.</param>
            <param name="thirdConverterFactory">The third converter factory.</param>
            <param name="forthConverterFactory">The forth converter factory.</param>
            <param name="fifthConverterFactory">The fifth converter factory.</param>
            <param name="sixthConverterFactory">The sixth converter factory.</param>
            <param name="seventhConverterFactory">The seventh converter factory.</param>
            <param name="eighthConverterFactory">The eighth converter factory.</param>
            <param name="ninthConverterFactory">The ninth converter factory.</param>
            <param name="tenthConverterFactory">The tenth converter factory.</param>
            <param name="consturctor">The consturctor.</param>
        </member>
        <member name="T:D2L.LP.Collections.Hierarchy.Traversal.IHierarchicalNodeTraverser`1">
            <summary>
            Describes a traverser that traverses the IHierarchicalNode and its descendants in a particular order
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.Hierarchy.Traversal.IHierarchicalNodeTraverser`1.Traverse(`0)">
            <summary>
            Traverses the IHierarchicalNode and its descendants
            </summary>
            <param name="node">Node to travers</param>
            <returns>IHierarchicalNode and its descendants in a particular order</returns>
        </member>
        <member name="M:D2L.Core.Transactions.CompositeTransactionException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Transactions.CompositeTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerExceptions">The inner exceptions.</param>
        </member>
        <member name="P:D2L.Core.Transactions.CompositeTransactionException.InnerExceptions">
            <summary>
            Gets the inner exceptions.
            </summary>
            <value>The inner exceptions.</value>
        </member>
        <member name="M:D2L.Core.Linq.GroupingAdapter`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Linq.GroupingAdapter`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:D2L.Core.Linq.GroupingAdapter`2.System#Collections#Generic#IEnumerable{TElement}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:D2L.Core.Linq.GroupingAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:D2L.Core.Linq.GroupingAdapter`2.System#Linq#IGrouping{TKey@TElement}#Key">
            <summary>
            Gets the key of the <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <value></value>
            <returns>
            The key of the <see cref="T:System.Linq.IGrouping`2"/>.
            </returns>
        </member>
        <member name="T:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1">
            <summary>
            A bound concurrent queue which uses the <see cref="T:System.Threading.Monitor"/> 
            to manage concurrency. 
            
            This queue implementation defines a timeout to be inactivity of the 
            queue as a whole, and not the duration of an individual enqueue/dequeue 
            operation. Therefore an operation will only timeout, when no other 
            operations occur for a timespan longer than that of the timeout period.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1"/> class.
            </summary>
            <param name="maximumSize">The maximum size.</param>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1"/> class.
            </summary>
            <param name="maximumSize">The maximum size.</param>
            <param name="initalCapacity">The inital capacity.</param>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1.TryEnqueue(`0)">
            <summary>
            Tries to enqueue the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns true iff the item was enqueued.</returns>
            <remarks>This method does not block.</remarks>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1.TryDequeue(`0@)">
            <summary>
            Tries to dequeue an item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            Returns true iff an item could be dequeued.
            </returns>
            <remarks>This method does not block.</remarks>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1.TryDequeue(`0@,System.Int32)">
            <summary>
            Tries to dequeue an item.
            </summary>
            <param name="item">The item.</param>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns>
            Returns true iff an item could be dequeued.
            </returns>
            <remarks>
            This method will attempt to block for the duration of the
            <paramref name="millisecondsTimeout"/> if the queue is empty.
            </remarks>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1.TryPeek(`0@)">
            <summary>
            Tries to peek at the item which at the start of the queue.
            </summary>
            <param name="item">The item.</param>
            <returns>
            Returns true iff an item could be peeked at.
            </returns>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1.ToArray">
            <summary>
            Converts the queue to an <see cref="T:System.Array"/>
            </summary>
            <returns>Returns the array of items in the queue.</returns>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1.TryEnqueue(`0,System.Int32)">
            <summary>
            Tries to enqueue the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns>Returns true iff the item was enqueued.</returns>
            <remarks>
            This method will attempt to block for the duration
            of the <paramref name="millisecondsTimeout"/> if the queue
            is full.
            </remarks>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1.Clear">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="P:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:D2L.Core.Collections.Concurrent.BoundedMonitorQueue`1.MaximumSize">
            <summary>
            Gets the maximum size.
            </summary>
            <value>The maximum size.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabaseExtensions.GetEnumerableObjectReader``1(D2L.LP.LayeredArch.Data.IDTObjectDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase,System.Converter{System.Data.IDataRecord,``0})">
            <summary>
            Use GetObjectReader instead.
            </summary>
            <remarks>Deprecating in the next version.</remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabaseExtensions.GetEnumerableObjectReader``1(D2L.LP.LayeredArch.Data.IDTObjectDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase,D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,``0})">
            <summary>
            Use GetObjectReader instead.
            </summary>
            <remarks>Deprecating in the next version.</remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDTObjectDatabaseExtensions.GetScalarReader``1(D2L.LP.LayeredArch.Data.IDTObjectDatabase,D2L.LP.LayeredArch.Data.SqlCommandBase)">
            <summary>
            Gets a reader of scalar values.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="database">The database.</param>
            <param name="cmd">The command.</param>
            <returns>Returns the enumerable of scalar values.</returns>
        </member>
        <member name="M:D2L.LP.Logging.Loggers.ILoggerFactory.Create(System.Type)">
            <summary>
            Creates the logger for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>Returns the logger.</returns>
        </member>
        <member name="M:D2L.LP.Logging.Loggers.DummyLoggerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Logging.Loggers.DummyLoggerFactory"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.Logging.Loggers.DummyLoggerFactory.D2L#LP#Logging#Loggers#ILoggerFactory#Create(System.Type)">
            <summary>
            Creates the logger for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>Returns the logger.</returns>
        </member>
        <member name="T:D2L.LP.LayeredArch.PagingInfo">
            <summary>
            Encapsulates paging request information
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.PagingInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.PagingInfo"/> class.
            </summary>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">Index of the page.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.PagingInfo.PageSize">
            <summary>
            Gets the page size.
            </summary>
            <value>The page size.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.PagingInfo.PageNumber">
            <summary>
            Gets or sets the index of the page.
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.FieldedObject.Fields">
            <summary>
            Gets the object's fields collection.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.ExposedFieldedObject.CommitChanges">
            <summary>
            Commits the changes for all of this instance's fields.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.ExposedFieldedObject.RollbackChanges">
            <summary>
            Rollbacks the changes for all of this instance's fields.
            </summary>
        </member>
        <member name="P:D2L.LP.LayeredArch.ExposedFieldedObject.Modified">
            <summary>
            Gets a value indicating whether any of this instances fields are modified.
            </summary>
            <value><c>true</c> if modified; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DataReaderConverterEnumerator`1.#ctor(System.Data.IDataReader,System.Converter{System.Data.IDataRecord,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.DataReaderConverterEnumerator`1"/> class.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="F:D2L.LP.LayeredArch.Data.Dto.DataReaderConverterEnumerator`1.m_disposed">
             Note: This is the recommended Microsoft disposal pattern.
             
             http://msdn.microsoft.com/en-us/library/system.idisposable.aspx
             
            
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DataReaderConverterEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DataReaderConverterEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DataReaderConverterEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.DbTypeDescriptor.TryGetConverter(System.Type,D2L.LP.LayeredArch.Data.DbTypeConverter@)">
            <summary>
            Tries to gets the converter for <paramref name="type"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="converter">The converter.</param>
            <returns>Returns <c>true</c> iff a converter could be gotten for the <paramref name="type"/>.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.EventsDbCommandWrapper.#ctor(System.Data.IDbCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Ado.EventsDbCommandWrapper"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.EventsDbCommandWrapper.OnExecutedNonQuery(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ExecutedNonQuery"/> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Ado.EventsDbCommandWrapper.OnExecutedScalar(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ExecutedScalar"/> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:D2L.EqualityComparison`1">
            <summary>
            Determines if two objects are equal.
            </summary>
            <param name="x">The first value to compare.</param>
            <param name="y">The second value to compare.</param>
            <remarks>Returns true iff the values are equal.</remarks>
        </member>
        <member name="M:D2L.Core.Comparisons.ArrayComparer.AreEqual``1(``0[],``0[],D2L.EqualityComparison{``0})">
            <summary>
            Determines if the values are equal.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns true iff the arrays are equal.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="first"/> is <value>null</value>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="second"/> is <value>null</value>.</exception>
        </member>
        <member name="M:D2L.Core.Comparisons.ArrayComparer.AreEqual``1(``0[],``0[])">
            <summary>
            Determines if the values are equal.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>Returns true iff the arrays are equal.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="first"/> is <value>null</value>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="second"/> is <value>null</value>.</exception>
        </member>
        <member name="M:D2L.Core.Comparisons.ArrayComparer.AreEqual``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the values are equal.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <param name="equalityComparier">The equality comparier.</param>
            <returns>Returns true iff the arrays are equal.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="first"/> is <value>null</value>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="second"/> is <value>null</value>.</exception>
        </member>
        <member name="T:D2L.Core.Collections.Concurrent.MonitorQueue`1">
            <summary>
            A concurrent queue which uses the <see cref="T:System.Threading.Monitor"/> 
            to manage concurrency. 
            
            This queue implementation defines a timeout to be inactivity of the 
            queue as a whole, and not the duration of an individual enqueue/dequeue 
            operation. Therefore an operation will only timeout, when no other 
            operations occur for a timespan longer than that of the timeout period.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.MonitorQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Collections.Concurrent.MonitorQueue`1"/> class.
            </summary>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.MonitorQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Collections.Concurrent.MonitorQueue`1"/> class.
            </summary>
            <param name="initialCapacity">The initial capacity.</param>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.MonitorQueue`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.MonitorQueue`1.TryEnqueue(`0)">
            <summary>
            Tries to enqueue the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns true iff the item was enqueued.</returns>
            <remarks>This method does not block.</remarks>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.MonitorQueue`1.TryDequeue(`0@)">
            <summary>
            Tries to dequeue an item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            Returns true iff an item could be dequeued.
            </returns>
            <remarks>This method does not block.</remarks>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.MonitorQueue`1.TryDequeue(`0@,System.Int32)">
            <summary>
            Tries to dequeue an item.
            </summary>
            <param name="item">The item.</param>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns>
            Returns true iff an item could be dequeued.
            </returns>
            <remarks>
            This method will attempt to block for the duration of the
            <paramref name="millisecondsTimeout"/> if the queue is empty.
            </remarks>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.MonitorQueue`1.TryPeek(`0@)">
            <summary>
            Tries to peek at the item which at the start of the queue.
            </summary>
            <param name="item">The item.</param>
            <returns>
            Returns true iff an item could be peeked at.
            </returns>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.MonitorQueue`1.ToArray">
            <summary>
            Converts the queue to an <see cref="T:System.Array"/>
            </summary>
            <returns>Returns the array of items in the queue.</returns>
        </member>
        <member name="M:D2L.Core.Collections.Concurrent.MonitorQueue`1.Clear">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="P:D2L.Core.Collections.Concurrent.MonitorQueue`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:D2L.Core.Reflection.NullableFactory.Create(System.Type,System.Object)">
            <summary>
            Creates a Nullable&lt;T&gt; value using the specified type and value.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>Returns the nullable value.</returns>
        </member>
        <member name="M:D2L.Core.Reflection.NullableFactory.CreateConverter(System.Type)">
            <summary>
            Creates a converter which creates a Nullable&lt;T&gt; value using the specified type and value.
            </summary>
            <param name="type">The type</param>
            <returns>Returns the converter.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.IDatabaseFieldMapper.MapField(System.String)">
            <summary>
            Maps a database field.
            </summary>
            <param name="databaseField">The database field.</param>
            <returns>
            Returns the mapped property or parameter name.
            </returns>
        </member>
        <member name="T:D2L.LP.Collections.Hierarchy.IHierarchicalNode`1">
            <summary>
            Describes a node of hierarchical data structure
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.Hierarchy.IHierarchicalNode`1.GetChildren">
            <summary>
            Children of the node
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.Hierarchy.IHierarchicalNode`1.GetParent">
            <summary>
            Parent of the node or null if no parent
            </summary>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.#cctor">
            <summary>
            Initializes the <see cref="T:D2L.Core.Xml.Serialization.XmlSerializable`1"/> class.
            </summary>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Xml.Serialization.XmlSerializable`1"/> class.
            </summary>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Xml.Serialization.XmlSerializable`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Xml.Serialization.XmlSerializable`1"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.op_Implicit(`0)~D2L.Core.Xml.Serialization.XmlSerializable{`0}">
            <summary>
            Performs an implicit conversion from <typeparamref name="T"/> to <see cref="T:D2L.Core.Xml.Serialization.XmlSerializable`1"/>.
            </summary>
            <param name="item">The item.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.op_Implicit(D2L.Core.Xml.Serialization.XmlSerializable{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:D2L.Core.Xml.Serialization.XmlSerializable`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="item">The item.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializable`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="P:D2L.Core.Xml.Serialization.XmlSerializable`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:D2L.Core.Threading.ExclusiveLock">
            <summary>
            A lock object that encapsulates the behavior of the <see cref="T:System.Threading.Monitor"/>.
            </summary>
            <remarks>
            The motivation for this was an exclusive lock which implements the
            <see cref="T:D2L.Core.Threading.IReaderWriterLock"/> interface so that functional code can
            be designed and written without being tied to a specific locking mechanism.
            </remarks>
        </member>
        <member name="M:D2L.Core.Threading.ExclusiveLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:D2L.Core.Threading.ExclusiveLock.EnterLock">
            <summary>
            Enters the lock.
            </summary>
        </member>
        <member name="M:D2L.Core.Threading.ExclusiveLock.ExitLock">
            <summary>
            Exits the lock.
            </summary>
        </member>
        <member name="M:D2L.Core.Threading.ExclusiveLock.TryEnterLock(System.Int32)">
            <summary>
            Tries to enter the lock.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns>Returns <value>true</value> if the lock could be entered.</returns>
        </member>
        <member name="M:D2L.Core.Threading.ExclusiveLock.TryEnterLock(System.TimeSpan)">
            <summary>
            Tries to enter the lock.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>
            Returns <value>true</value> if the lock could be entered.
            </returns>
        </member>
        <member name="P:D2L.Core.Threading.ExclusiveLock.IsLockHeld">
            <summary>
            Gets a value indicating whether this lock instance is held by the current thread.
            </summary>
            <value>
            	<c>true</c> if this lock instance is lock held by the current thread; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlParameterCollection"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlParameterCollection.Add(D2L.LP.LayeredArch.Data.SqlParameter)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlParameterCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains a parameter with the specified name.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>
            	<c>true</c> if [contains] [the specified parameter name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:D2L.LP.LayeredArch.Data.PrefixDatabaseFieldMapper">
            <summary>
            This database field mapper uses a prefix to map its database
            fields to a property or parameter name.
            
            Input:   {Prefix}{Target}
            Output:  {Target}
            
            Note: If the database field name does not start with the 
            specified prefix, then the original field name is returned.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.PrefixDatabaseFieldMapper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.PrefixDatabaseFieldMapper"/> class.
            </summary>
            <param name="fieldPrefix">The field prefix.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.PrefixDatabaseFieldMapper.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.PrefixDatabaseFieldMapper"/> class.
            </summary>
            <param name="fieldPrefix">The field prefix.</param>
            <param name="enforcePrefix">When true, fields that do not begin with the prefix will not be matched.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.PrefixDatabaseFieldMapper.MapField(System.String)">
            <summary>
            Maps a database field.
            </summary>
            <param name="field">The database field.</param>
            <returns>
            Returns the mapped property or parameter name.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.OutputSqlParameter`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.OutputSqlParameter`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.OutputSqlParameter`1.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.OutputSqlParameter`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="dbTypeSize">The size of the database type.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.OutputSqlParameter`1.Value">
            <summary>
            Gets or sets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.OutputSqlParameter`1.DbTypeSize">
            <summary>
            Gets or sets the size of the database type.
            </summary>
            <value>The size of the database type.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.OutputSqlParameter`1.Assigned">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:D2L.LP.LayeredArch.Data.OutputSqlParameter`1"/> is assigned.
            </summary>
            <value><c>true</c> if assigned; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeList`1"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeList`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeList`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.#ctor(D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeList`1"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.#ctor(System.Int32,D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeList`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.#ctor(System.Collections.Generic.IEnumerable{`0},D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeList`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <typeparamref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.ToArray">
            <summary>
            Returns an array of the values in the list.
            </summary>
            <returns>The array of values.</returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeList`1.TryGetValue(System.Int32,`0@)">
            <summary>
            Tries to get the value at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns>Returns true iff the index is within the bounds of the array and a value was assigned.</returns>
        </member>
        <member name="P:D2L.LP.Collections.ThreadSafeList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:D2L.LP.Collections.ThreadSafeList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.#ctor(D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> class.
            </summary>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.#ctor(System.Int32,D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <typeparamref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.FindFirstOrAdd(System.Predicate{`0},System.Func{`0})">
            <summary>
            Finds and returns first item which satisifies the <paramref name="predicate"/> or addes a new item via <paramref name="valueFetcher"/>.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="valueFetcher">The value fetcher.</param>
            <returns>Returns the item.</returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeCollection`1.AddIfDoesNotExists(`0)">
            <summary>
            Adds the item if does not already exist in the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns the item.</returns>
        </member>
        <member name="P:D2L.LP.Collections.ThreadSafeCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/>.
            </returns>
        </member>
        <member name="P:D2L.LP.Collections.ThreadSafeCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:D2L.LP.Collections.ThreadSafeCollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="F:D2L.Core.Security.Cryptography.RandomValueProvider.m_random">
            <remarks>
            The RNGCryptoServiceProvider class is thread-safe
            </remarks>
        </member>
        <member name="M:D2L.Core.Runtime.DisposeUtility.SafeDispose``1(``0)">
            <summary>
            Tries to dispose the object and catches/logs any exceptions
            that are thrown.
            </summary>
            <typeparam name="T">The disposable type.</typeparam>
            <param name="disposable">The disposable.</param>
            <returns>Returns true iff the object was disposed.</returns>
        </member>
        <member name="M:D2L.Core.Runtime.DisposeUtility.SafeDispose``1(``0,System.Boolean)">
            <summary>
            Tries to dispose the object and catches/logs any exceptions
            that are thrown. Only pass false 
            for <paramref name="doNotLog"/> in exceptional cases when you expect 
            an exception and don't care about logging it.
            </summary>
            <typeparam name="T">The disposable type.</typeparam>
            <param name="disposable">The disposable.</param>
            <param name="doNotLog">Don't log the exception if it happens</param>
            <returns>Returns true iff the object was disposed.</returns>
        </member>
        <member name="M:D2L.Core.Runtime.DisposeUtility.SafeDispose``1(``0,System.Exception@)">
            <summary>
            Tries to dispose the object and catches/logs any exceptions
            that are thrown.
            </summary>
            <typeparam name="T">The disposable type.</typeparam>
            <param name="disposable">The disposable.</param>
            <param name="exception">The exception.</param>
            <returns>
            Returns true iff the object was disposed.
            </returns>
        </member>
        <member name="M:D2L.Core.Runtime.DisposeUtility.SafeDispose``1(``0,System.Exception@,System.Boolean)">
            <summary>
            Tries to dispose the object and catches/logs any exceptions
            that are thrown. Only pass false 
            for <paramref name="doNotLog"/> in exceptional cases when you expect 
            an exception and don't care about logging it.
            </summary>
            <typeparam name="T">The disposable type.</typeparam>
            <param name="disposable">The disposable.</param>
            <param name="exception">The exception.</param>
            <param name="doNotLog">Don't log the exception if it happens</param>
            <returns>
            Returns true iff the object was disposed.
            </returns>
        </member>
        <member name="M:D2L.Core.Runtime.DisposeUtility.SafeDispose``1(``0@)">
            <summary>
            Tries to dispose the object and catches/logs any exceptions
            that are thrown. If successful, the <paramref name="disposable"/>
            reference is set to <value>null</value>.
            </summary>
            <typeparam name="T">The disposable type.</typeparam>
            <param name="disposable">The disposable.</param>
            <returns>
            Returns true iff the object was disposed.
            </returns>
        </member>
        <member name="M:D2L.Core.Runtime.DisposeUtility.SafeDispose``1(``0@,System.Boolean)">
            <summary>
            Tries to dispose the object and catches/logs any exceptions
            that are thrown. If successful, the <paramref name="disposable"/>
            reference is set to <value>null</value>. Only pass false
            for <paramref name="doNotLog"/> in exceptional cases when you expect
            an exception and don't care about logging it.
            </summary>
            <typeparam name="T">The disposable type.</typeparam>
            <param name="disposable">The disposable.</param>
            <param name="doNotLog">Don't log the exception if it happens</param>
            <returns>
            Returns true iff the object was disposed.
            </returns>
        </member>
        <member name="M:D2L.Core.Runtime.DisposeUtility.SafeDispose``1(``0@,System.Exception@)">
            <summary>
            Tries to dispose the object and catches/logs any exceptions
            that are thrown. If successful, the <paramref name="disposable"/>
            reference is set to <value>null</value>.
            </summary>
            <typeparam name="T">The disposable type.</typeparam>
            <param name="disposable">The disposable.</param>
            <param name="exception">The exception.</param>
            <returns>
            Returns true iff the object was disposed.
            </returns>
        </member>
        <member name="M:D2L.Core.Runtime.DisposeUtility.SafeDispose``1(``0@,System.Exception@,System.Boolean)">
            <summary>
            Tries to dispose the object and catches/logs any exceptions
            that are thrown. If successful, the <paramref name="disposable"/>
            reference is set to <value>null</value>. Only pass false 
            for <paramref name="doNotLog"/> in exceptional cases when you expect 
            an exception and don't care about logging it.
            </summary>
            <typeparam name="T">The disposable type.</typeparam>
            <param name="disposable">The disposable.</param>
            <param name="exception">The exception.</param>
            <param name="doNotLog">Don't log the exception if it happens</param>
            <returns>
            Returns true iff the object was disposed.
            </returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.ReadOnlyFieldAdapter`2.#ctor(D2L.LP.LayeredArch.IReadOnlyField{`0},System.Converter{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.ReadOnlyFieldAdapter`2"/> class
            which only supports one way conversion, and does not relay commits/rollbacks.
            </summary>
            <param name="source">The source.</param>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ReturnValueSqlParameter`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.ReturnValueSqlParameter`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.ReturnValueSqlParameter`1.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.ReturnValueSqlParameter`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="dbTypeSize">The size of the database type.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.ReturnValueSqlParameter`1.Value">
            <summary>
            Gets or sets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.ReturnValueSqlParameter`1.DbTypeSize">
            <summary>
            Gets or sets the size of the database type.
            </summary>
            <value>The size of the database type.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.ReturnValueSqlParameter`1.Assigned">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:D2L.LP.LayeredArch.Data.ReturnValueSqlParameter`1"/> is assigned.
            </summary>
            <value><c>true</c> if assigned; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:D2L.LP.Globalization.Collations.Domain.ICollation.CultureCode">
            <summary>
            Gets the culture code.
            </summary>
            <value>The culture code.</value>
        </member>
        <member name="P:D2L.LP.Globalization.Collations.Domain.ICollation.StringComparer">
            <summary>
            Gets the string comparer.
            </summary>
            <value>The string comparer.</value>
        </member>
        <member name="M:D2L.Core.Comparisons.EnumerableComparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Comparisons.EnumerableComparer`1"/> class.
            </summary>
        </member>
        <member name="M:D2L.Core.Comparisons.EnumerableComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Comparisons.EnumerableComparer`1"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:D2L.Core.Comparisons.EnumerableComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Comparisons.EnumerableComparer`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:D2L.Core.Comparisons.EnumerableComparer`1.Compare(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:D2L.Core.Comparisons.CompositeComparer`1.#ctor(System.Collections.Generic.IEnumerable{System.Comparison{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Comparisons.CompositeComparer`1"/> class.
            </summary>
            <param name="comparisons">The comparisons.</param>
        </member>
        <member name="M:D2L.Core.Comparisons.CompositeComparer`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IComparer{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Comparisons.CompositeComparer`1"/> class.
            </summary>
            <param name="comparers">The comparers.</param>
        </member>
        <member name="M:D2L.Core.Comparisons.CompositeComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="P:D2L.LP.Logging.Configuration.LoggingConfigurationSection.LogManagerFactory">
            <summary>
            Gets the log manager factory.
            </summary>
            <value>The log manager factory.</value>
        </member>
        <member name="T:D2L.LP.LayeredArch.PagedResult`1">
            <summary>
            The result of a <see cref="T:D2L.LP.LayeredArch.PagedResult`1"/>.
            </summary>
            <typeparam name="T">The object type.</typeparam>
        </member>
        <member name="M:D2L.LP.LayeredArch.PagedResult`1.#ctor(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.PagedResult`1"/> class.
            </summary>
            <param name="totalCount">The total count.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="objects">The objects.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.PagedResult`1.#ctor(System.Int64,System.Int32,System.Int32,System.Int64,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.PagedResult`1"/> class.
            </summary>
            <param name="totalCount">The total count.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="objectCount">The object count.</param>
            <param name="objects">The objects.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.PagedResult`1.#ctor(System.Int64,System.Int32,System.Int32,System.Int64,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.PagedResult`1"/> class.
            </summary>
            <param name="totalCount">The total count.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="objectCount">The object count.</param>
            <param name="objects">The objects.</param>
        </member>
        <member name="P:D2L.LP.LayeredArch.PagedResult`1.Objects">
            <summary>
            Gets the objects.
            </summary>
            <value>The objects.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.PagedResult`1.ObjectCollection">
            <summary>
            Gets the objects.
            </summary>
            <value>The objects.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.PagedResult`1.ObjectCount">
            <summary>
            Gets the object count.
            </summary>
            <value>The object count.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.PagedResult`1.TotalCount">
            <summary>
            Gets the total count.
            </summary>
            <value>The total count.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.PagedResult`1.PageNumber">
            <summary>
            Gets the page number.
            </summary>
            <value>The page number.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.PagedResult`1.PageSize">
            <summary>
            Gets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.Create``1">
            <summary>
            Creates a new field and adds it to the collection.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.Create``1(``0)">
            <summary>
            Creates a new field and adds it to the collection.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="value">The value.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.Create``1(D2L.EqualityComparison{``0})">
            <summary>
            Creates a new field and adds it to the collection.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.Create``1(``0,D2L.EqualityComparison{``0})">
            <summary>
            Creates a new field and adds it to the collection.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="value">The value.</param>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.CreateDeferred``1(``0)">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="value">The value.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.CreateDeferred``1(``0,D2L.EqualityComparison{``0})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="value">The value.</param>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.CreateDeferred``1(System.Func{``0})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="initializer">The initializer.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.CreateDeferred``1(System.Func{``0},D2L.EqualityComparison{``0})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="initializer">The initializer.</param>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.CreateKeyedDeferred``2(``0,System.Func{``0,``1})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="value">The value.</param>
            <param name="keySelector">The key selector.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.CreateKeyedDeferred``2(``0,System.Func{``0,``1},D2L.EqualityComparison{``0})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="value">The value.</param>
            <param name="keySelector">The key selector.</param>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.CreateKeyedDeferred``2(``1,System.Func{``1,``0},System.Func{``0,``1})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="initializer">The initializer.</param>
            <param name="keySelector">The key selector.</param>
            <param name="initializerKey">The initializer key.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.CreateKeyedDeferred``2(``1,System.Func{``1,``0},System.Func{``0,``1},D2L.EqualityComparison{``0})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="initializer">The initializer.</param>
            <param name="keySelector">The key selector.</param>
            <param name="initializerKey">The initializer key.</param>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldFactory.DefaultEqualityComparison``1(``0,``0)">
            <summary>
            Ares the values equal.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.CommitChanges">
            <summary>
            Commits the changes made to any of the fields.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.RollbackChanges">
            <summary>
            Rolls back the changes made to any of the fields.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.Create``1">
            <summary>
            Creates a new field and adds it to the collection.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.Create``1(``0)">
            <summary>
            Creates a new field and adds it to the collection.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="value">The value.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.Create``1(D2L.EqualityComparison{``0})">
            <summary>
            Creates a new field and adds it to the collection.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.Create``1(``0,D2L.EqualityComparison{``0})">
            <summary>
            Creates a new field and adds it to the collection.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="value">The value.</param>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.CreateDeferred``1(``0)">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="value">The value.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.CreateDeferred``1(``0,D2L.EqualityComparison{``0})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="value">The value.</param>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.CreateDeferred``1(System.Func{``0})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="initializer">The initializer.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.CreateDeferred``1(System.Func{``0},D2L.EqualityComparison{``0})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="initializer">The initializer.</param>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.CreateKeyedDeferred``2(``0,System.Func{``0,``1})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="value">The value.</param>
            <param name="keySelector">The key selector.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.CreateKeyedDeferred``2(``0,System.Func{``0,``1},D2L.EqualityComparison{``0})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="value">The value.</param>
            <param name="keySelector">The key selector.</param>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.CreateKeyedDeferred``2(``1,System.Func{``1,``0},System.Func{``0,``1})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="initializer">The initializer.</param>
            <param name="keySelector">The key selector.</param>
            <param name="initializerKey">The initializer key.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.FieldCollection.CreateKeyedDeferred``2(``1,System.Func{``1,``0},System.Func{``0,``1},D2L.EqualityComparison{``0})">
            <summary>
            Creates a new deffered field and adds it to the collection..
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="initializer">The initializer.</param>
            <param name="keySelector">The key selector.</param>
            <param name="initializerKey">The initializer key.</param>
            <param name="equalityComparison">The equality comparison.</param>
            <returns>Returns the new field.</returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.FieldCollection.Modified">
            <summary>
            Gets a value indicating whether any of the fields in this <see cref="T:D2L.LP.LayeredArch.FieldCollection"/> are modified.
            </summary>
            <value><c>true</c> if modified; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> class.
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> class.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <param name="comparer">The key comparer.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> class.
            </summary>
            <param name="comparer">The key comparer.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to this instance.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to this instance.</param>
            <param name="comparer">The key comparer.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.#ctor(D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> class.
            </summary>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.#ctor(System.Int32,D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> class.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> class.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <param name="comparer">The key comparer.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> class.
            </summary>
            <param name="comparer">The key comparer.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to this instance.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0},D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to this instance.</param>
            <param name="comparer">The key comparer.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> contains a specific value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/>.  The value can be null for reference types.</param>
            <returns>
            	<c>true</c> if the specified instances contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.Set(`0,`1)">
            <summary>
            Sets the key valued pair.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.Set(`0,System.Func{`1})">
            <summary>
            Sets the key valued pair.
            </summary>
            <param name="key">The key.</param>
            <param name="valueFetcher">The value fetcher.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.Set(System.Func{`1},System.Func{`1,`0})">
            <summary>
            Sets the key valued pair.
            </summary>
            <param name="valueFetcher">The value fetcher.</param>
            <param name="keyGetter">The key getter</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <typeparamref name="TValue"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.Add(`0,System.Func{`1})">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="valueFetcher">The value fetcher.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.AddIfKeyDoesNotExist(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/>, as long as an existing element with the same key does not already exist.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The value.</param>
            <returns>
            Returns true iff the item was added; false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.AddIfKeyDoesNotExist(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the key value pair to the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/>, as long as an existing element with the same key does not already exist.
            </summary>
            <param name="pair">The pair.</param>
            <returns>
            Returns true iff the item was added; false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Key is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.AddIfKeyDoesNotExist(`0,System.Func{`1})">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/>, as long as an existing element with the same key does not already exist.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="valueFetcher">The value fetcher.</param>
            <returns>Returns true iff the item was added; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.GetValueOrAdd(`0,`1)">
            <summary>
            Gets the value for the specified key if one exists, otherwise adds the key value pair and returns <paramref name="value"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Returns the value.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.GetValueOrAdd(`0,System.Func{`1})">
            <summary>
            Gets the value for the specified key if one exists, otherwise creates and adds a new item using the provided <paramref name="createFunction"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="createFunction">The create function.</param>
            <returns>Returns the value.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:D2L.LP.Collections.ThreadSafeDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.GetValueOrReplace(`0,System.Predicate{`1},`1)">
            <summary>
            Gets the value for the specified key and validates it using
            <paramref name="predicate"/> if one exists, otherwise creates
            and adds a new item using the provided <paramref name="replacementValue"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="predicate">The predicate.</param>
            <param name="replacementValue">The replacement value.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.GetValueOrReplace``1(`0,``0)">
            <summary>
            Gets the value for the specified key and validates its type if one exists, otherwise creates
            and adds a new item using the provided <paramref name="replacementValue"/>.
            </summary>
            <typeparam name="TValueType">The type of the value type.</typeparam>
            <param name="key">The key.</param>
            <param name="replacementValue">The replacement value.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.GetValueOrReplace``1(`0,System.Predicate{``0},``0)">
            <summary>
            Gets the value for the specified key and validates it using
            <typeparamref name="TValueType"/> and <paramref name="predicate"/> if one exists, otherwise creates
            and adds a new item using the provided <paramref name="replacementValue"/>.
            </summary>
            <typeparam name="TValueType">The type of the value type.</typeparam>
            <param name="key">The key.</param>
            <param name="predicate">The predicate.</param>
            <param name="replacementValue">The replacement value.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.GetValueOrReplace(`0,System.Predicate{`1},System.Func{`1})">
            <summary>
            Gets the value for the specified key and validates it using
            <paramref name="predicate"/> if one exists, otherwise creates
            and adds a new item using the provided <paramref name="createFunction"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="predicate">The predicate.</param>
            <param name="createFunction">The create function.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.GetValueOrReplace``1(`0,System.Func{``0})">
            <summary>
            Gets the value for the specified key and validates its type if one exists, otherwise creates
            and adds a new item using the provided <paramref name="createFunction"/>.
            </summary>
            <typeparam name="TValueType">The type of the value type.</typeparam>
            <param name="key">The key.</param>
            <param name="createFunction">The create function.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.GetValueOrReplace``1(`0,System.Predicate{``0},System.Func{``0})">
            <summary>
            Gets the value for the specified key and validates it using
            <typeparamref name="TValueType"/> and <paramref name="predicate"/> if one exists, otherwise creates
            and adds a new item using the provided <paramref name="createFunction"/>.
            </summary>
            <typeparam name="TValueType">The type of the value type.</typeparam>
            <param name="key">The key.</param>
            <param name="predicate">The predicate.</param>
            <param name="createFunction">The create function.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeDictionary`2.Remove(System.Predicate{`1})">
            <summary>
            Removes the items from the dictionary where the <paramref name="predicate"/> evaluates to <value>true.</value>
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="P:D2L.LP.Collections.ThreadSafeDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:D2L.LP.Collections.ThreadSafeDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:D2L.LP.Collections.Hierarchy.Traversal.HierarchicalNodePostOrderTraverser`1">
            <summary>
            Traverses an IHierarchicalNode and its descedants in a post-order tree-traversal
            <remarks>This implementation does not use recurssion and should perform better than a recurssion-based implementation</remarks>
            </summary>
        </member>
        <member name="M:D2L.Core.Xml.Serialization.XmlSerializerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Xml.Serialization.XmlSerializerAttribute"/> class.
            </summary>
            <param name="type">The type of the xml serializer.</param>
        </member>
        <member name="P:D2L.Core.Xml.Serialization.XmlSerializerAttribute.Type">
            <summary>
            Gets the xml serializer type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:D2L.Core.Xml.DictionaryXmlFormatter`2">
            <summary>
            A helper class for formatting an array as XML, and parsing that XML.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:D2L.Core.Xml.DictionaryXmlFormatter`2.#ctor(System.String,System.String,System.Func{`0,System.String},System.Func{System.String,`0},System.Func{`1,System.String},System.Func{System.String,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Xml.ArrayXmlFormatter`1"/> class.
            </summary>
            <param name="rootElementName">The root element's name.</param>
            <param name="itemElementsName">The item elements' name.</param>
            <param name="keyFormatter">The key formatter.</param>
            <param name="keyParser">The key parser.</param>
            <param name="valueFormatter">The value formatter.</param>
            <param name="valueParser">The value parser.</param>
        </member>
        <member name="M:D2L.Core.Xml.DictionaryXmlFormatter`2.#ctor(System.String,System.String,System.String,System.String,System.Func{`0,System.String},System.Func{System.String,`0},System.Func{`1,System.String},System.Func{System.String,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.Core.Xml.ArrayXmlFormatter`1"/> class.
            </summary>
            <param name="rootElementName">The root element's name.</param>
            <param name="itemElementsName">The item elements' name.</param>
            <param name="keyAttributeName">Name of the key attribute.</param>
            <param name="valueAttributeName">Name of the value attribute.</param>
            <param name="keyFormatter">The key formatter.</param>
            <param name="keyParser">The key parser.</param>
            <param name="valueFormatter">The value formatter.</param>
            <param name="valueParser">The value parser.</param>
        </member>
        <member name="M:D2L.Core.Xml.DictionaryXmlFormatter`2.FormatXml(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Formats the XML.
            </summary>
            <param name="items">The items.</param>
            <returns>Returns the formatted xml.</returns>
        </member>
        <member name="M:D2L.Core.Xml.DictionaryXmlFormatter`2.FormatXml(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Formats the XML.
            </summary>
            <param name="items">The items.</param>
            <returns>Returns the formatted xml.</returns>
        </member>
        <member name="M:D2L.Core.Xml.DictionaryXmlFormatter`2.ParseXml(System.String)">
            <summary>
            Parses the items from the XML.
            </summary>
            <param name="xml">The XML.</param>
            <returns>Returns the items.</returns>
        </member>
        <member name="M:D2L.Core.Xml.DictionaryXmlFormatter`2.ParseXml(System.String,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Parses the items from the XML.
            </summary>
            <param name="xml">The XML.</param>
            <param name="keyComparer">The key comparer.</param>
            <returns>Returns the items.</returns>
        </member>
        <member name="P:D2L.Core.Xml.DictionaryXmlFormatter`2.RootElementName">
            <summary>
            Gets the name of the root element.
            </summary>
            <value>The name of the root element.</value>
        </member>
        <member name="P:D2L.Core.Xml.DictionaryXmlFormatter`2.ItemElementsName">
            <summary>
            Gets the name of the item elements.
            </summary>
            <value>The name of the item elements.</value>
        </member>
        <member name="P:D2L.Core.Xml.DictionaryXmlFormatter`2.KeyAttributeName">
            <summary>
            Gets the name of the key attribute.
            </summary>
            <value>The name of the key attribute.</value>
        </member>
        <member name="P:D2L.Core.Xml.DictionaryXmlFormatter`2.ValueAttributeName">
            <summary>
            Gets the name of the value attribute.
            </summary>
            <value>The name of the value attribute.</value>
        </member>
        <member name="M:D2L.LP.Logging.Contexts.DummyLoggingContextProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Logging.Contexts.DummyLoggingContextProperties"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.#ctor(D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/> class.
            </summary>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.#ctor(System.Int32,D2L.Core.Threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item to the queue.
            </summary>
            <param name="item">The object to enqueue.</param>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.Clear">
            <summary>
            Removes all items from the queue.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <typeparamref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the queue.
            </summary>
            <returns>The object that is removed from the beginning of the queue.</returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.TryDequeue(`0@)">
            <summary>
            Removes and returns the object at the beginning of the queue.
            </summary>
            <returns>The object that is removed from the beginning of the queue.</returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the queue without removing it.
            </summary>
            <returns>The object at the beginning of the queue.</returns>
            <exception cref="T:System.InvalidOperationException">The queue is empty.</exception>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the queue if that number is less than 90 percent of current capacity.
            </summary>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:D2L.LP.Collections.ThreadSafeQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:D2L.LP.Collections.ThreadSafeQueue`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:D2L.LP.Collections.ThreadSafeQueue`1"/>.
            </returns>
        </member>
        <member name="P:D2L.Core.Data.MsSql.Diagnostics.RecordCountEventArgs.RecordCounts">
            <summary>
            The record counts for each result set.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.Dto.DelegatedDataReaderObjectEnumerable`1.#ctor(System.Func{System.Data.IDataReader},D2L.LP.LayeredArch.IConverterFactory{System.Data.IDataRecord,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.Dto.DelegatedDataReaderObjectEnumerable`1"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="converterFactory">The converter factory.</param>
        </member>
        <member name="T:D2L.TryGetFunc`1">
            <summary>
            Encapsulates a try/get method that has no parameters and outputs a value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="TResult">The type of the output value of the method that this delegate encapsulates.</typeparam>
            <param name="result">The output value of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:D2L.TryGetFunc`2">
            <summary>
            Encapsulates a try/get method that has a single parameter and outputs a value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the output value of the method that this delegate encapsulates.</typeparam>
            <param name="arg">The parameter of the method that this delegate encapsulates.</param>
            <param name="result">The output value of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:D2L.TryGetFunc`3">
            <summary>
            Encapsulates a try/get method that has two parameters and outputs a value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the output value of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="result">The output value of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:D2L.TryGetFunc`4">
            <summary>
            Encapsulates a try/get method that has three parameters and outputs a value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the output value of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="result">The output value of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:D2L.TryGetFunc`5">
            <summary>
            Encapsulates a try/get method that has four parameters and outputs a value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the forth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the output value of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The forth parameter of the method that this delegate encapsulates.</param>
            <param name="result">The output value of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:D2L.TryGetFunc`6">
            <summary>
            Encapsulates a try/get method that has five parameters and outputs a value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="TResult">The type of the output value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the forth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The forth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="result">The output value of the method that this delegate encapsulates.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlCommandBuilder"/> class.
            </summary>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBuilder.#ctor(D2L.LP.LayeredArch.Data.SqlTextCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlCommandBuilder"/> class.
            </summary>
            <param name="command">An existing command on which to base this one.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBuilder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlCommandBuilder"/> class.
            </summary>
            <param name="capacity">The suggested starting size of this instance.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlCommandBuilder"/> class.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBuilder.#ctor(D2L.Core.Transactions.IStatefulTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlCommandBuilder"/> class.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBuilder.#ctor(System.Int32,D2L.Core.Transactions.IStatefulTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlCommandBuilder"/> class.
            </summary>
            <param name="capacity">The suggested starting size of this instance.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBuilder.#ctor(System.String,D2L.Core.Transactions.IStatefulTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.SqlCommandBuilder"/> class.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBuilder.Append(System.String)">
            <summary>
            Appends the specified SQL.
            </summary>
            <param name="sql">The SQL.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBuilder.AddParameters(D2L.LP.LayeredArch.Data.SqlParameterCollection)">
            <summary>
            Adds a collection of parameters to this command.
            </summary>
            <param name="parameters">The collection of parameters.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.SqlCommandBuilder.GenerateParameterName">
            <summary>
            Generates a unique parameter name.
            </summary>
            <returns>Returns the parameter name.</returns>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.SqlCommandBuilder.StringBuilder">
            <summary>
            Gets the string builder.
            </summary>
            <value>The string builder.</value>
        </member>
        <member name="P:D2L.LP.LayeredArch.Data.SqlCommandBuilder.CommandText">
            <summary>
            Gets the command text.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.MsSql.MsSqlQueryFormatter.#ctor(D2L.LP.LayeredArch.Data.MsSql.MsSqlExtendedDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:D2L.LP.LayeredArch.Data.MsSql.MsSqlQueryFormatter"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.MsSql.MsSqlQueryFormatter.AppendOrderByClause(D2L.LP.LayeredArch.Data.SqlCommandBuilder,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo})">
            <summary>
            Appends an order by clause if sorting info is definied.
            </summary>
            <param name="sqlCommandBuilder">The SQL command builder.</param>
            <param name="sortingInfo">The sorting info.</param>
            <remarks>
            If no sorting info is defined, nothing is appended, otherwise
            the appended text is in the format of:
            ' ORDER BY AscField, DescField DESC, OtherField '
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.MsSql.MsSqlQueryFormatter.AppendOrderByClause(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{D2L.LP.LayeredArch.SortingInfo})">
            <summary>
            Appends an order by clause if sorting info is definied.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="sortingInfo">The sorting info.</param>
            <remarks>
            If no sorting info is defined, nothing is appended, otherwise
            the appended text is in the format of:
            ' ORDER BY AscField, DescField DESC, OtherField '
            </remarks>
        </member>
        <member name="M:D2L.LP.LayeredArch.Data.MsSql.MsSqlQueryFormatter.FormatSortingInfo(D2L.LP.LayeredArch.SortingInfo)">
            <summary>
            Formats the sorting info.
            </summary>
            <param name="sortingInfo">The sorting info.</param>
            <returns>
            Returns the formatted sorting info expression.
            </returns>
        </member>
    </members>
</doc>
